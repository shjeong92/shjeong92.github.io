<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://shjeong92.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shjeong92.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2021-07-07T17:34:40+09:00</updated><id>https://shjeong92.github.io/feed.xml</id><title type="html">Hyuk’s devlog</title><subtitle>Your Site Description
</subtitle><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><entry><title type="html">[ #2 ] 운영체제 - 가상메모리</title><link href="https://shjeong92.github.io/2021/07/07/OS-02.html" rel="alternate" type="text/html" title="[ #2 ] 운영체제 - 가상메모리" /><published>2021-07-07T00:00:00+09:00</published><updated>2021-07-07T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/07/OS-02</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/07/OS-02.html">&lt;h3 id=&quot;가상-메모리란&quot;&gt;가상 메모리란?&lt;/h3&gt;

&lt;p&gt;가상 메모리는 메모리를 관리하는 방법의 하나로, 각 프로그램에 실제 메모리 주소가 아닌 가상의 메모리 주소를 주는 방식을 말합니다.
이러한 방식은 멀티태스킹 운영체제에서 흔히 사용되며, RAM보다 큰 영역으로 제공하는 방법으로 사용된다고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;가상-메모리의-등장-배경&quot;&gt;가상 메모리의 등장 배경&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“RAM은 결코 충분하지 않다.”&lt;/strong&gt;
이 말은 옛날부터 운영체제 설계자들이 고민해 왔던 말이라고 하는데요,
예를들어, 가상 메모리의 개념을 사용하지 않는 시스템에서 어플리케이션 수행 시 1기가 바이트의 용량을 차지하는 프로그램이 있다고 가정해 보면, 시스템의 메모리는 최소 1기가 바이트 이상이 되어야 할 것입니다. 만일, 1바이트라도 모자라다면 메모리 부족 오류가 나야하죠. 요즘 게임프로그램은 용량이 어마어마하죠? 수십기가는 그냥 넘는데도 16GB램에서 별 탈없이 돌아갑니다. 어떻게 가능했던걸까요?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가상 메모리는 프로그램이 차지하는 주소공간의 개념에 대해 조금 다르게 접근한다고 합니다.
가상 메모리를 사용하는 운영체제는 “프로그램을 실행하는데 얼마나 많은 메모리가 필요한가?”에 집중하지 않고, &lt;strong&gt;프로그램을 실행하는데 필요한 최소한의 메모리는 얼마인가?&lt;/strong&gt;에 대해 고민하기 시작했다고 합니다.&lt;/p&gt;

&lt;p&gt;메모리 접근은 순차적이고 지역화되어 있다는 특성때문에 어플리케이션을 실행하는데 완전한 1기가 바이트가 필요한 것처럼 보이지만, 사실 이 어플리케이션을 실행하는데 필요한 메모리 용량은 1기가바이트 보다 훨씬 적게 된다고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위에서 말한 1기가바이트의 프로그램이 실행하는데 필요한 최소한의 처리 순서를 아래와 같이 가정해 봅시다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;메모리에서 명령 읽어오기&lt;/li&gt;
  &lt;li&gt;명령어가 필요로하는 데이터도 메모리에서 읽어오기&lt;/li&gt;
  &lt;li&gt;명령이 완료된 후, 결과가 메모리에 기록됨&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예를들어, 이 각각의 명령 처리에 10메가 바이트씩의 메모리가 할당 되어야 한다면, 고작 30메가바이트 만으로 프로그램을 실행 시킬 수 있다는 말이죠.&lt;/p&gt;

&lt;p&gt;그렇다면 실행한 다음은 어떻게 되는걸까요?&lt;/p&gt;

&lt;p&gt;프로그램의 나머지 기능을 수행할 코드나 데이터부분의 처리를 위한 메모리 할당은 어떻게 해야 할까요?
그 나머지는 어디에 위치해야 할까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;바로, &lt;strong&gt;보조 기억장치(하드,SSD)&lt;/strong&gt;입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 필요하거나 향후 필요할 어플리케이션의 일부분을 필요한만큼 계속 RAM에 올려 놓도록 가상 메모리 하부 시스템을 구축하여 동작할 수만 있다면, 하드디스크를 RAM의 보조기억장치로 쓰는데 문제가 없는 것입니다.
이러한 방식은 빠르고 작은 기억장치를 크고 느린 기억장치와 병합하여 하나의 크고 빠른 기억장치처럼 작동하게 한다는 면에서 캐시(Cache)와 RAM의 관계와도 유사하다고 할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;가상-주소-공간&quot;&gt;가상 주소 공간&lt;/h3&gt;

&lt;p&gt;가상 주소 공간이란 어플리케이션이 사용 가능한 최대 주소 공간을 말합니다.&lt;/p&gt;

&lt;p&gt;CPU 아키텍쳐에 따라 주소지정을 위해 필요한 비트수가 달라지기 때문에 가상 주소 공간은 아키텍쳐에 따라 달라지게 된다. CPU 아키텍쳐는 레지스터(Resiter)의 크기와 관련이 있습니다.&lt;/p&gt;

&lt;p&gt;예를들어, 32비트 CPU는 2^32 = 4294967296로 0 ~ 4294967295 까지의 주소 공간을 나타낼 수 
있습니다&lt;/p&gt;

&lt;p&gt;여기에 메모리의 가장 작은 단위는 Byte이기 때문에 4GByte가 되는 것입니다.
때문에 각 어플리케이션들은 4GB의 주소공간을 가질 수 있고, 32비트 시스템의 운영체제에서 RAM이 4GB까지 밖에 인식 못 하는 이유도 여기에 있었던 것이지요.&lt;/p&gt;

&lt;p&gt;그렇다면 64bit cpu는 얼마나 많은 물리적 주소공간을 가질 수 있을까요?&lt;/p&gt;

&lt;p&gt;2^64 즉 184467440709551616(16엑사바이트) 엄청나게 큰 숫자입니다. 하지만 실제로는 하위 48bit만 사용한다고 합니다. 이는 256TB에 향하는 주소 범위인데요 16엑사바이트 만큼의 큰 양의 메모리 어드레싱이 필요하지 않기 때문이라고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;가상메모리-동작-방법&quot;&gt;가상메모리 동작 방법&lt;/h3&gt;

&lt;p&gt;이제 가상메모리가 어떻게 동작하는지 알아봅시다.&lt;/p&gt;

&lt;p&gt;대표적인 가상 메모리 기법으로 페이징(paging), 세그멘테이션(segmentation)이 있는데, 현대 운영체제에서는 두가지 방식이 혼용되어 사용된다고 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;페이징 - 고정분할 - 페이지 테이블&lt;/li&gt;
  &lt;li&gt;세그멘테이션 - 가변 분할 - 세그멘테이션 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124723850-6af3cf00-df46-11eb-92b3-42e6c2c5903e.png&quot; alt=&quot;vm01&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이징paging&quot;&gt;페이징(Paging)&lt;/h3&gt;

&lt;p&gt;페이징이란 고정 크기로 분할된 페이지(page)를 통해 가상 메모리를 관리하는 기법입니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;페이지(page) : 가상 메모리를 고정 크기로 나눈 블록&lt;/li&gt;
  &lt;li&gt;프레임(frame) : 실제 메모리를 페이지와 같은 크기로 나눈 블록 (= 페이지 프레임)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프레임과 페이지는 메모리를 일정한 크기의 공간으로 나누어 관리하는 단위이며, 프레임과 페이지의 크기는 같습니다.&lt;/p&gt;

&lt;h5 id=&quot;페이지와-프레임간의-관계&quot;&gt;페이지와 프레임간의 관계&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Vitual Memory의 page가 하나의 frame을 할당 받으면, 물리 메모리에 위치하게 된다.&lt;/li&gt;
  &lt;li&gt;프레임을 할당 받지 못한 페이지들은 외부 저장장치에 저장되며, 이때도 프레임과 같은 크기 단위로 관리된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;페이지-테이블page-table&quot;&gt;페이지 테이블(Page Table)&lt;/h5&gt;

&lt;p&gt;프로세스의 페이지 정보를 저장하고 있는 테이블
=&amp;gt; page에 매핑되는 frame을 찾을 때 참조함&lt;/p&gt;

&lt;p&gt;페이지 테이블 정보&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;키(또는 인덱스): 페이지 번호&lt;/li&gt;
  &lt;li&gt;값
    &lt;ul&gt;
      &lt;li&gt;페이지와 매핑된 frame 번호&lt;/li&gt;
      &lt;li&gt;기타 플래그 정보(페이지 존재 유무, R/W 권한, 접근권한)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mmumemory-management-unit란&quot;&gt;MMU(Memory Management Unit)란?&lt;/h3&gt;
&lt;p&gt;MMU는 CPU가 메모리에 접근하는 것을 관리하는 컴퓨터 하드웨어 부품인데요,
가상 메모리 주소를 실제 메모리 주소로 변환하며, 메모리 보호, 캐시 관리, 버스 중재 등의 역할을 담당합니다.&lt;/p&gt;

&lt;p&gt;MMU는 페이지를 기본 단위로 가상 주소를 실제 물리 주소로 매핑 시키는 역할을 합니다.
변화 과정에서, TLB와 Page Table이 사용됩니다.&lt;/p&gt;

&lt;p&gt;TLB : 캐시 역할. 자주 사용되는 페이지 저장
Page Table : 물리 주소와 연관시킬 수 있는 페이지가 저장되어 있는 자료구조&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124724971-71367b00-df47-11eb-9787-91d23fd3ea2e.png&quot; alt=&quot;vm06&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;페이징-기법에서의-주소-바인딩-과정&quot;&gt;페이징 기법에서의 주소 바인딩 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124723860-6cbd9280-df46-11eb-8997-67e21400e663.png&quot; alt=&quot;vm02&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;P: 페이지번호&lt;/li&gt;
  &lt;li&gt;d: 변위&lt;/li&gt;
  &lt;li&gt;f: 프레임 번호&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;CPU에서 사용하는 logical address는 페이지 번호(P)와 변위(d)로 구성&lt;/li&gt;
  &lt;li&gt;Page Table에서 페이지 번호에 해당하는 프레임 시작 주소를 찾음&lt;/li&gt;
  &lt;li&gt;프레임 시작 주소(f) + 변위(d)를 통해 물리 주소를 계산하여 실제 물리 주소에 접근&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 변환은 MMU(Memory Management Unit)에 의해 이루워 집니다.
이러한 변환 과정은 MMU에서 이루어 지며, 페이지 정보가 캐싱 되어 있을 경우 TLB를 통해 빠르게 접근하도록 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124723863-6d562900-df46-11eb-9980-4a3f1900a25e.png&quot; alt=&quot;vm03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;strong&gt;어떻게 캐싱 되어 있는지&lt;/strong&gt; 알 수 있을까요??
페이지 테이블은 &lt;strong&gt;PTE&lt;/strong&gt;라고 하는 레코드를 갖는데, 이 &lt;strong&gt;PTE&lt;/strong&gt;를 통해 캐싱 되어 있는지 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124723865-6deebf80-df46-11eb-8529-ad658ea5a360.png&quot; alt=&quot;vm04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이지 테이블의 레코드로 프레임 번호와 여러 플레그로 이루어져 구성되어 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;포함-정보&quot;&gt;포함 정보&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Frame Number : 프레임 번호&lt;/li&gt;
  &lt;li&gt;Present/Absent : 메인 메모리에 페이지가 존재하는지 확인하는 비트 필드 =&amp;gt; 이를 통해 page fault 판별이 가능&lt;/li&gt;
  &lt;li&gt;Protection : 읽기만 가능한 경우 0, 읽기 쓰기 모두 가능한 경우 1&lt;/li&gt;
  &lt;li&gt;Reference : 참조 비트 (최근 참조 됐는지 판단하여 페이지 교체 알고리즘을 적용 시킬 수 있음)&lt;/li&gt;
  &lt;li&gt;Caching : 해당 페이지를 캐싱할지 선택&lt;/li&gt;
  &lt;li&gt;Dirty (or modified bit) : 오염 또는 수정 여부를 판단하는 비트로, 페이지 내용이 변경됐음을 알려 페이지 교체시 하드 디스크에 다시 기록하게 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;요구-페이징demand-paging과-페이지-부재page-fault&quot;&gt;요구 페이징(Demand Paging)과 페이지 부재(Page Fault)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;요구 페이징(Demand Pagin) : 요청할 때 해당 페이지를 메모리로 가져오는 것&lt;/li&gt;
  &lt;li&gt;페이지 부재(Page Fault) : 요청한 페이지가 메모리에 존재하지 않는 경우를 말한다. (캐시 미스와 비슷?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설명&lt;/p&gt;

&lt;p&gt;요구 페이징(Demand Paging)은 가져 오기 정책(fetch policy)중 요구 적재(demand fetch)에 해당하는 방법으로, 한정된 메모리 공간을 효율적으로 관리하기 위해 사용되는 방법입니다. ( &amp;lt;-&amp;gt; Anticipatory Paging : pre-fetch 방식 )&lt;/p&gt;

&lt;p&gt;페이지 부재(Page Fault)는 요구 페이징을 사용할 때 발생할 수 있는 상황으로, 페이지 부재가 발생하면 필요로하는 페이지를 스왑 영역에서 메모리로 옮깁니다.&lt;/p&gt;

&lt;h3 id=&quot;페이지-교체page-replacement&quot;&gt;페이지 교체(Page replacement)&lt;/h3&gt;

&lt;p&gt;페이지가 메모리에서 올라오고 쫒겨나고를 반복하기 때문에, 어떤 페이지가 쫒겨나야 하는지 결정 해줘야 합니다.&lt;/p&gt;

&lt;p&gt;이를 결정해주는 알고리즘을 페이지 교체 알고리즘이라고 합니다.
ex) FIFO, LRU, LFU, NUR 등의 알고리즘이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;스레싱thrasing&quot;&gt;스레싱(Thrasing)&lt;/h3&gt;

&lt;p&gt;잦은 페이지 부재로 인해 페이지를 교체 하는 시간이 많아져 CPU처리율이 저하되는 현상.
메모리 부족, 부적절한 페이지 교체 등이 원인이 될 수 있음.
cach hit rate와 관련있음.&lt;/p&gt;

&lt;!-- 
![vm05](https://user-images.githubusercontent.com/75003424/124723869-6e875600-df46-11eb-8498-dcde8d43ff1a.png) --&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="OS" /><category term="운영체제" /><category term="가상메모리" /><summary type="html">가상 메모리란? 가상 메모리는 메모리를 관리하는 방법의 하나로, 각 프로그램에 실제 메모리 주소가 아닌 가상의 메모리 주소를 주는 방식을 말합니다. 이러한 방식은 멀티태스킹 운영체제에서 흔히 사용되며, RAM보다 큰 영역으로 제공하는 방법으로 사용된다고 합니다. 가상 메모리의 등장 배경 “RAM은 결코 충분하지 않다.” 이 말은 옛날부터 운영체제 설계자들이 고민해 왔던 말이라고 하는데요, 예를들어, 가상 메모리의 개념을 사용하지 않는 시스템에서 어플리케이션 수행 시 1기가 바이트의 용량을 차지하는 프로그램이 있다고 가정해 보면, 시스템의 메모리는 최소 1기가 바이트 이상이 되어야 할 것입니다. 만일, 1바이트라도 모자라다면 메모리 부족 오류가 나야하죠. 요즘 게임프로그램은 용량이 어마어마하죠? 수십기가는 그냥 넘는데도 16GB램에서 별 탈없이 돌아갑니다. 어떻게 가능했던걸까요? 가상 메모리는 프로그램이 차지하는 주소공간의 개념에 대해 조금 다르게 접근한다고 합니다. 가상 메모리를 사용하는 운영체제는 “프로그램을 실행하는데 얼마나 많은 메모리가 필요한가?”에 집중하지 않고, 프로그램을 실행하는데 필요한 최소한의 메모리는 얼마인가?에 대해 고민하기 시작했다고 합니다. 메모리 접근은 순차적이고 지역화되어 있다는 특성때문에 어플리케이션을 실행하는데 완전한 1기가 바이트가 필요한 것처럼 보이지만, 사실 이 어플리케이션을 실행하는데 필요한 메모리 용량은 1기가바이트 보다 훨씬 적게 된다고 합니다. 위에서 말한 1기가바이트의 프로그램이 실행하는데 필요한 최소한의 처리 순서를 아래와 같이 가정해 봅시다. 메모리에서 명령 읽어오기 명령어가 필요로하는 데이터도 메모리에서 읽어오기 명령이 완료된 후, 결과가 메모리에 기록됨 예를들어, 이 각각의 명령 처리에 10메가 바이트씩의 메모리가 할당 되어야 한다면, 고작 30메가바이트 만으로 프로그램을 실행 시킬 수 있다는 말이죠. 그렇다면 실행한 다음은 어떻게 되는걸까요? 프로그램의 나머지 기능을 수행할 코드나 데이터부분의 처리를 위한 메모리 할당은 어떻게 해야 할까요? 그 나머지는 어디에 위치해야 할까요? 바로, 보조 기억장치(하드,SSD)입니다. 현재 필요하거나 향후 필요할 어플리케이션의 일부분을 필요한만큼 계속 RAM에 올려 놓도록 가상 메모리 하부 시스템을 구축하여 동작할 수만 있다면, 하드디스크를 RAM의 보조기억장치로 쓰는데 문제가 없는 것입니다. 이러한 방식은 빠르고 작은 기억장치를 크고 느린 기억장치와 병합하여 하나의 크고 빠른 기억장치처럼 작동하게 한다는 면에서 캐시(Cache)와 RAM의 관계와도 유사하다고 할 수 있습니다. 가상 주소 공간 가상 주소 공간이란 어플리케이션이 사용 가능한 최대 주소 공간을 말합니다. CPU 아키텍쳐에 따라 주소지정을 위해 필요한 비트수가 달라지기 때문에 가상 주소 공간은 아키텍쳐에 따라 달라지게 된다. CPU 아키텍쳐는 레지스터(Resiter)의 크기와 관련이 있습니다. 예를들어, 32비트 CPU는 2^32 = 4294967296로 0 ~ 4294967295 까지의 주소 공간을 나타낼 수 있습니다 여기에 메모리의 가장 작은 단위는 Byte이기 때문에 4GByte가 되는 것입니다. 때문에 각 어플리케이션들은 4GB의 주소공간을 가질 수 있고, 32비트 시스템의 운영체제에서 RAM이 4GB까지 밖에 인식 못 하는 이유도 여기에 있었던 것이지요. 그렇다면 64bit cpu는 얼마나 많은 물리적 주소공간을 가질 수 있을까요? 2^64 즉 184467440709551616(16엑사바이트) 엄청나게 큰 숫자입니다. 하지만 실제로는 하위 48bit만 사용한다고 합니다. 이는 256TB에 향하는 주소 범위인데요 16엑사바이트 만큼의 큰 양의 메모리 어드레싱이 필요하지 않기 때문이라고 합니다. 가상메모리 동작 방법 이제 가상메모리가 어떻게 동작하는지 알아봅시다. 대표적인 가상 메모리 기법으로 페이징(paging), 세그멘테이션(segmentation)이 있는데, 현대 운영체제에서는 두가지 방식이 혼용되어 사용된다고 합니다. 페이징 - 고정분할 - 페이지 테이블 세그멘테이션 - 가변 분할 - 세그멘테이션 테이블 페이징(Paging) 페이징이란 고정 크기로 분할된 페이지(page)를 통해 가상 메모리를 관리하는 기법입니다 페이지(page) : 가상 메모리를 고정 크기로 나눈 블록 프레임(frame) : 실제 메모리를 페이지와 같은 크기로 나눈 블록 (= 페이지 프레임) 프레임과 페이지는 메모리를 일정한 크기의 공간으로 나누어 관리하는 단위이며, 프레임과 페이지의 크기는 같습니다. 페이지와 프레임간의 관계 Vitual Memory의 page가 하나의 frame을 할당 받으면, 물리 메모리에 위치하게 된다. 프레임을 할당 받지 못한 페이지들은 외부 저장장치에 저장되며, 이때도 프레임과 같은 크기 단위로 관리된다. 페이지 테이블(Page Table) 프로세스의 페이지 정보를 저장하고 있는 테이블 =&amp;gt; page에 매핑되는 frame을 찾을 때 참조함 페이지 테이블 정보 키(또는 인덱스): 페이지 번호 값 페이지와 매핑된 frame 번호 기타 플래그 정보(페이지 존재 유무, R/W 권한, 접근권한) MMU(Memory Management Unit)란? MMU는 CPU가 메모리에 접근하는 것을 관리하는 컴퓨터 하드웨어 부품인데요, 가상 메모리 주소를 실제 메모리 주소로 변환하며, 메모리 보호, 캐시 관리, 버스 중재 등의 역할을 담당합니다. MMU는 페이지를 기본 단위로 가상 주소를 실제 물리 주소로 매핑 시키는 역할을 합니다. 변화 과정에서, TLB와 Page Table이 사용됩니다. TLB : 캐시 역할. 자주 사용되는 페이지 저장 Page Table : 물리 주소와 연관시킬 수 있는 페이지가 저장되어 있는 자료구조 페이징 기법에서의 주소 바인딩 과정 P: 페이지번호 d: 변위 f: 프레임 번호 CPU에서 사용하는 logical address는 페이지 번호(P)와 변위(d)로 구성 Page Table에서 페이지 번호에 해당하는 프레임 시작 주소를 찾음 프레임 시작 주소(f) + 변위(d)를 통해 물리 주소를 계산하여 실제 물리 주소에 접근 이러한 변환은 MMU(Memory Management Unit)에 의해 이루워 집니다. 이러한 변환 과정은 MMU에서 이루어 지며, 페이지 정보가 캐싱 되어 있을 경우 TLB를 통해 빠르게 접근하도록 합니다. 그렇다면 어떻게 캐싱 되어 있는지 알 수 있을까요?? 페이지 테이블은 PTE라고 하는 레코드를 갖는데, 이 PTE를 통해 캐싱 되어 있는지 알 수 있습니다. 페이지 테이블의 레코드로 프레임 번호와 여러 플레그로 이루어져 구성되어 있습니다. 포함 정보 Frame Number : 프레임 번호 Present/Absent : 메인 메모리에 페이지가 존재하는지 확인하는 비트 필드 =&amp;gt; 이를 통해 page fault 판별이 가능 Protection : 읽기만 가능한 경우 0, 읽기 쓰기 모두 가능한 경우 1 Reference : 참조 비트 (최근 참조 됐는지 판단하여 페이지 교체 알고리즘을 적용 시킬 수 있음) Caching : 해당 페이지를 캐싱할지 선택 Dirty (or modified bit) : 오염 또는 수정 여부를 판단하는 비트로, 페이지 내용이 변경됐음을 알려 페이지 교체시 하드 디스크에 다시 기록하게 한다. 요구 페이징(Demand Paging)과 페이지 부재(Page Fault) 요구 페이징(Demand Pagin) : 요청할 때 해당 페이지를 메모리로 가져오는 것 페이지 부재(Page Fault) : 요청한 페이지가 메모리에 존재하지 않는 경우를 말한다. (캐시 미스와 비슷?) 설명 요구 페이징(Demand Paging)은 가져 오기 정책(fetch policy)중 요구 적재(demand fetch)에 해당하는 방법으로, 한정된 메모리 공간을 효율적으로 관리하기 위해 사용되는 방법입니다. ( &amp;lt;-&amp;gt; Anticipatory Paging : pre-fetch 방식 ) 페이지 부재(Page Fault)는 요구 페이징을 사용할 때 발생할 수 있는 상황으로, 페이지 부재가 발생하면 필요로하는 페이지를 스왑 영역에서 메모리로 옮깁니다. 페이지 교체(Page replacement) 페이지가 메모리에서 올라오고 쫒겨나고를 반복하기 때문에, 어떤 페이지가 쫒겨나야 하는지 결정 해줘야 합니다. 이를 결정해주는 알고리즘을 페이지 교체 알고리즘이라고 합니다. ex) FIFO, LRU, LFU, NUR 등의 알고리즘이 있습니다. 스레싱(Thrasing) 잦은 페이지 부재로 인해 페이지를 교체 하는 시간이 많아져 CPU처리율이 저하되는 현상. 메모리 부족, 부적절한 페이지 교체 등이 원인이 될 수 있음. cach hit rate와 관련있음.</summary></entry><entry><title type="html">[ #1 ] 운영체제 - 커널 &amp;amp; 쉘</title><link href="https://shjeong92.github.io/2021/07/05/OS-01.html" rel="alternate" type="text/html" title="[ #1 ] 운영체제 - 커널 &amp;amp; 쉘" /><published>2021-07-05T00:00:00+09:00</published><updated>2021-07-05T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/05/OS-01</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/05/OS-01.html">&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124380142-24a83100-dcf6-11eb-9a3f-ee5e7fb5e544.png&quot; alt=&quot;kernelandshell&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;리눅스-커널-kernel&quot;&gt;리눅스 커널 (Kernel)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;운영체제 내부에 있는 것으로 컴퓨터의 하드웨어를 제어하며, 운영체제의 90%를 차지.&lt;/li&gt;
  &lt;li&gt;소프트웨어 - 하드웨어간의 커뮤니케이션을 관리하는 프로그램&lt;/li&gt;
  &lt;li&gt;하드웨어 관리 및 프로세스 분배 등 여러 시스템 자원 관리&lt;/li&gt;
  &lt;li&gt;하드웨어를 직접적으로 제어하는 운영체제에서 가장 핵심 요소&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;리눅스-쉘-shell&quot;&gt;리눅스 쉘 (Shell)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 명령을 입력하면 그 명령을 커널이 이해할 수 있도록 기계어로 전달하는 프로그램&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사용자(명령) → 쉘(해석) → 커널(명령 수행 후 결과 전송) → 쉘(해석) → 사용자(결과 확인)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유저와 커널사이를 이어주는 명령어 해석기라고 보면 될것 같습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-이때 우리가 전달한 스크립트를 커널이 이해하기 쉽게 해석해주는 역할이 바로 쉘이다.&lt;/p&gt;

&lt;p&gt;-윈도의 cmd, linux/unix의 bash ,  최신 맥OS에서는 기본으로 zsh를 사용하는데, 이외에도 다양한 종류가 있습니다.&lt;/p&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><category term="RDBMS" /><summary type="html">리눅스 커널 (Kernel) 운영체제 내부에 있는 것으로 컴퓨터의 하드웨어를 제어하며, 운영체제의 90%를 차지. 소프트웨어 - 하드웨어간의 커뮤니케이션을 관리하는 프로그램 하드웨어 관리 및 프로세스 분배 등 여러 시스템 자원 관리 하드웨어를 직접적으로 제어하는 운영체제에서 가장 핵심 요소 리눅스 쉘 (Shell) 사용자가 명령을 입력하면 그 명령을 커널이 이해할 수 있도록 기계어로 전달하는 프로그램 사용자(명령) → 쉘(해석) → 커널(명령 수행 후 결과 전송) → 쉘(해석) → 사용자(결과 확인) 유저와 커널사이를 이어주는 명령어 해석기라고 보면 될것 같습니다. -이때 우리가 전달한 스크립트를 커널이 이해하기 쉽게 해석해주는 역할이 바로 쉘이다. -윈도의 cmd, linux/unix의 bash , 최신 맥OS에서는 기본으로 zsh를 사용하는데, 이외에도 다양한 종류가 있습니다.</summary></entry><entry><title type="html">[ #6 ] MySQL - 인터넷과 데이터베이스</title><link href="https://shjeong92.github.io/2021/07/04/Database-06.html" rel="alternate" type="text/html" title="[ #6 ] MySQL - 인터넷과 데이터베이스" /><published>2021-07-04T00:00:00+09:00</published><updated>2021-07-04T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/04/Database-06</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/04/Database-06.html">&lt;p&gt;&lt;a href=&quot;https://shjeong92.github.io/2021/07/03/Database-01.html&quot;&gt;첫번째 포스트&lt;/a&gt;에서 말하지 않고 넘어간 부분이 있습니다.&lt;/p&gt;

&lt;p&gt;바로 데이터베이스 서버입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124372989-a7ff5d80-dcc9-11eb-89ca-3825e5387e26.png&quot; alt=&quot;dbserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저는 brew를 사용하여 MySQL을 설치하였는데 MySQL은 두개의 프로그램을 동시에 설치해 줍니다. 하나는 &lt;strong&gt;database client&lt;/strong&gt; 이고 다른 하나는 &lt;strong&gt;database server&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;실습을 하면서 &lt;strong&gt;database server&lt;/strong&gt;를 직접 다루는 것처럼 느낄 수 있지만 사실은 
데이터베이스 서버는 직접 다룰 수 없습니다.&lt;/p&gt;

&lt;p&gt;어떠한 경우에서든 데이터베이스 클라이언트를 사용해야하는데요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
Enter password: 
Welcome to the MySQL monitor.  Commands end with &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Your MySQL connection &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;is 23
Server version: 8.0.25 Homebrew

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &lt;span class=&quot;s1&quot;&gt;&apos;help;&apos;&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;&apos;\h&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;&apos;\c&apos;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Welcome to the MySQL monitor이라고 되어있는게 보이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124373149-be59e900-dcca-11eb-8cea-6a444aa0a7c1.png&quot; alt=&quot;dbserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 MySQL monitor 가 database client중의 하나였던 것이고, MySQL을 만든 사람들이 서버에 접속할 수 있도록 기본적으로 제공하는 클라이언트가 MySQL 모니터인 것입니다. 그리고 이는 CLI(Command Line Interface)를 통해서 database server을 제어하는 프로그램인 것입니다.&lt;/p&gt;

&lt;p&gt;또한, 클라이언트 종류는 생각보다 다양합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL Workbench&lt;/li&gt;
  &lt;li&gt;Sequel Pro&lt;/li&gt;
  &lt;li&gt;HeidiSQL&lt;/li&gt;
  &lt;li&gt;phpMyAdmin&lt;/li&gt;
  &lt;li&gt;Toad for MySQL&lt;/li&gt;
  &lt;li&gt;MySQL-Front&lt;/li&gt;
  &lt;li&gt;Neor Profile SQL&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL monitor의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터의 자원을 최대한 일 자체에 쓰기 위해서 GUI를 지원하지 않는경우(일반적인 클라우드 서버도 모두 CLI이기도 하죠)가 많은 반면에 MySQL monitor은 어디서든지 지원한다는 장점이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL monitor의 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령어 기반이기에 명령어를 기억해야 한다는점&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL에서 공식적으로 제공하는 &lt;strong&gt;mysqlworkbench&lt;/strong&gt;라는 프로그램이 있는데 이는 GUI(Graphical User Interface)기반 프로그램으로 엘셀을 다루듯이 database서버와 소통할 수 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Database의 **서버**와 **클라이언트**의 존재를 알았다면 더 엄청난 것도 할 수 있는것을 알 수 있습니다. &lt;br /&gt; 데이터베이스 서버에 데이터를 저장하고, 전세계에 있는 수만은 데이터베이 클라이언트 들이 데이터베이스 서버를 중심으로 데이터를 넣고 빼는것이 가능해지는 것입니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;db에-관해서-앞으로-심화적으로-공부해야-할-것들&quot;&gt;DB에 관해서 앞으로 심화적으로 공부해야 할 것들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서브 쿼리 깊게 알아보기&lt;/li&gt;
  &lt;li&gt;JOIN 에대해서 더 깊게 알아보기&lt;/li&gt;
  &lt;li&gt;INDEX (성능상에 문제가 생겼을때 봐야할것)&lt;/li&gt;
  &lt;li&gt;Data Modeling(Table을 어떻게 잘 만들것인지), 정규화 &amp;amp; 비정규화&lt;/li&gt;
  &lt;li&gt;Backup - 하드디스크는 죽는다 언제 죽는지는 모르지만 죽는다. 백업의 필요성 (mysqldump, binary log)&lt;/li&gt;
  &lt;li&gt;Cloud db service(RDS, Google Cloud SQL for MySQL, AZURE DB for MySQL, …etc) db 기능자체에 집중 할 수 있으니 backup 수월해짐.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><category term="RDBMS" /><summary type="html">첫번째 포스트에서 말하지 않고 넘어간 부분이 있습니다. 바로 데이터베이스 서버입니다. 저는 brew를 사용하여 MySQL을 설치하였는데 MySQL은 두개의 프로그램을 동시에 설치해 줍니다. 하나는 database client 이고 다른 하나는 database server입니다. 실습을 하면서 database server를 직접 다루는 것처럼 느낄 수 있지만 사실은 데이터베이스 서버는 직접 다룰 수 없습니다. 어떠한 경우에서든 데이터베이스 클라이언트를 사용해야하는데요. mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 23 Server version: 8.0.25 Homebrew Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. mysql&amp;gt; Welcome to the MySQL monitor이라고 되어있는게 보이죠. 이 MySQL monitor 가 database client중의 하나였던 것이고, MySQL을 만든 사람들이 서버에 접속할 수 있도록 기본적으로 제공하는 클라이언트가 MySQL 모니터인 것입니다. 그리고 이는 CLI(Command Line Interface)를 통해서 database server을 제어하는 프로그램인 것입니다. 또한, 클라이언트 종류는 생각보다 다양합니다. MySQL Workbench Sequel Pro HeidiSQL phpMyAdmin Toad for MySQL MySQL-Front Neor Profile SQL … MySQL monitor의 장점 컴퓨터의 자원을 최대한 일 자체에 쓰기 위해서 GUI를 지원하지 않는경우(일반적인 클라우드 서버도 모두 CLI이기도 하죠)가 많은 반면에 MySQL monitor은 어디서든지 지원한다는 장점이 있습니다. MySQL monitor의 단점 명령어 기반이기에 명령어를 기억해야 한다는점 MySQL에서 공식적으로 제공하는 mysqlworkbench라는 프로그램이 있는데 이는 GUI(Graphical User Interface)기반 프로그램으로 엘셀을 다루듯이 database서버와 소통할 수 있습니다. Database의 서버와 클라이언트의 존재를 알았다면 더 엄청난 것도 할 수 있는것을 알 수 있습니다. 데이터베이스 서버에 데이터를 저장하고, 전세계에 있는 수만은 데이터베이 클라이언트 들이 데이터베이스 서버를 중심으로 데이터를 넣고 빼는것이 가능해지는 것입니다. DB에 관해서 앞으로 심화적으로 공부해야 할 것들 서브 쿼리 깊게 알아보기 JOIN 에대해서 더 깊게 알아보기 INDEX (성능상에 문제가 생겼을때 봐야할것) Data Modeling(Table을 어떻게 잘 만들것인지), 정규화 &amp;amp; 비정규화 Backup - 하드디스크는 죽는다 언제 죽는지는 모르지만 죽는다. 백업의 필요성 (mysqldump, binary log) Cloud db service(RDS, Google Cloud SQL for MySQL, AZURE DB for MySQL, …etc) db 기능자체에 집중 할 수 있으니 backup 수월해짐.</summary></entry><entry><title type="html">[ #4 ] MySQL - CRUD operation</title><link href="https://shjeong92.github.io/2021/07/04/Database-04.html" rel="alternate" type="text/html" title="[ #4 ] MySQL - CRUD operation" /><published>2021-07-04T00:00:00+09:00</published><updated>2021-07-04T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/04/Database-04</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/04/Database-04.html">&lt;p&gt;이전 포스팅에서는 MySQL에서 table을 만들어 봤엇는데요.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 해당 테이블에 데이터를 생성, 조회, 업데이트, 삭제를 해보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;create&quot;&gt;CREATE&lt;/h3&gt;
&lt;p&gt;우선 데이터를 삽입하기에 앞서서 테이블에 어떠한 attribute가 있는지 모를 수 있는데
이때 아래와 같은 명령어를 사용하면 확인할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;명령어&quot;&gt;명령어&lt;/h4&gt;
&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;예제&quot;&gt;예제&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124358643-2f15ec80-dc5c-11eb-86d7-5e9aac5f1ea8.png&quot; alt=&quot;insert&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;데이터-삽입명령어&quot;&gt;데이터 삽입명령어&lt;/h4&gt;
&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table컬럼명1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table컬럼명2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table컬럼명3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;컬럼명1 에들어갈 값&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;컬럼명2 에들어갈 값&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;컬럼명3 에들어갈 값&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 테이블에서 id는 auto_increment 설정을 해줬기때문에 따로 값을 삽입하지않아도 자동으로 삽입됩니다.&lt;/p&gt;

&lt;p&gt;따라서 우리는 아래와 같이 나머지 5개 칼럼값만 넣어주면됩니다.&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;MySQL&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;MySQL is ...&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sanghyuk&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;developer&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와같이 스프래드 아래의 스프래드 시트 나머지 값들도 다 넣어줍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;read&quot;&gt;READ&lt;/h3&gt;

&lt;p&gt;조회명령어는 아래와 같이 엄청나게 다양한 옵션이 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124359408-bc0e7500-dc5f-11eb-8644-b43cdfdf33a7.png&quot; alt=&quot;selectoptions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대괄호 안에있는 옵션은 넣지 않아도 되는 값들이고, 그렇지 않은값은 반드시 필요한 값들입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SELECT 절의 select_expr 에는 컬럼명을 입력할 수 있는데 원하는 컬럼의 값만 테이블에서 가져올 수 있습니다.&lt;/li&gt;
  &lt;li&gt;WHERE 절에서는 조건문등을 지정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;LIMIT &amp;lt;number&amp;gt;을 사용하면 위의 값들을 구하고 number에 해당하는 숫자만큼의 줄만 출력해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 옵션외에도 여러가지 옵션들이 많지만 이에 관한 포스팅은 추후에 작성하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DB를 잘 다룬다는 것은 SELECT 문을 어떻게 잘 다루느냐에 달려있다고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;update&quot;&gt;UPDATE&lt;/h3&gt;

&lt;h4 id=&quot;명령어-1&quot;&gt;명령어&lt;/h4&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATE &amp;lt;table명&amp;gt;
SET
  &amp;lt;바꾸고싶은값의 칼럼이름&amp;gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &amp;lt;바꿀값&amp;gt;
WHERE
  조건문
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;:star: &lt;strong&gt;만약에 WHERE 및 조건문이 빠진다면 모든 행의 값이 바뀌니 정말정말 주의해야 합니다&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kahn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현제 테이블의 상태는 위와 같은데, id가 3인 데이터의 author을 바꾸고자 한다면 아래와 같이 입력하면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;예시&quot;&gt;예시&lt;/h4&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPDATE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Joe&apos;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다시 테이블을 확인해 보면 잘 바뀐것을 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Joe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;:star: &lt;strong&gt;DELETE또한 마찬가지로 UPDATE처럼 WHERE절의 조건을 잘 적어줘야 합니다. 만약 적지않으면 모든 값이 지워지겠지요.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;문법&quot;&gt;문법&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE FROM &amp;lt;table명&amp;gt;
WHERE 필드이름&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;데이터값
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래의 테이블에서 id값이 5인 데이터를 테이블에서 지워보겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kahn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 확인해 보면 잘 지워진것을 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postgreSQL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2021-07-04&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Joe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><summary type="html">이전 포스팅에서는 MySQL에서 table을 만들어 봤엇는데요. 이번 포스팅에서는 해당 테이블에 데이터를 생성, 조회, 업데이트, 삭제를 해보겠습니다. CREATE 우선 데이터를 삽입하기에 앞서서 테이블에 어떠한 attribute가 있는지 모를 수 있는데 이때 아래와 같은 명령어를 사용하면 확인할 수 있습니다. 명령어 DESC &amp;lt;table이름&amp;gt; 예제 데이터 삽입명령어 INSERT INTO &amp;lt;table이름&amp;gt; (table컬럼명1 , table컬럼명2, table컬럼명3 , ...) values (&apos;컬럼명1 에들어갈 값&apos;,&apos;컬럼명2 에들어갈 값&apos;, &apos;컬럼명3 에들어갈 값&apos;, ...);; 이 테이블에서 id는 auto_increment 설정을 해줬기때문에 따로 값을 삽입하지않아도 자동으로 삽입됩니다. 따라서 우리는 아래와 같이 나머지 5개 칼럼값만 넣어주면됩니다. mysql&amp;gt; INSERT INTO topic (title, description, created, author, profile) values(&apos;MySQL&apos;, &apos;MySQL is ...&apos;, NOW(),&apos;sanghyuk&apos;, &apos;developer&apos;); Query OK, 1 row affected (0.00 sec) 위와같이 스프래드 아래의 스프래드 시트 나머지 값들도 다 넣어줍니다. READ 조회명령어는 아래와 같이 엄청나게 다양한 옵션이 존재합니다. 대괄호 안에있는 옵션은 넣지 않아도 되는 값들이고, 그렇지 않은값은 반드시 필요한 값들입니다. SELECT 절의 select_expr 에는 컬럼명을 입력할 수 있는데 원하는 컬럼의 값만 테이블에서 가져올 수 있습니다. WHERE 절에서는 조건문등을 지정할 수 있습니다. LIMIT &amp;lt;number&amp;gt;을 사용하면 위의 값들을 구하고 number에 해당하는 숫자만큼의 줄만 출력해줍니다. 위의 옵션외에도 여러가지 옵션들이 많지만 이에 관한 포스팅은 추후에 작성하도록 하겠습니다. DB를 잘 다룬다는 것은 SELECT 문을 어떻게 잘 다루느냐에 달려있다고 합니다. UPDATE 명령어 UPDATE &amp;lt;table명&amp;gt; SET &amp;lt;바꾸고싶은값의 칼럼이름&amp;gt; = &amp;lt;바꿀값&amp;gt; WHERE 조건문 :star: 만약에 WHERE 및 조건문이 빠진다면 모든 행의 값이 바뀌니 정말정말 주의해야 합니다. SELECT * FROM topic; +----+------------+-------------------+---------------------+----------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+----------+---------------------------+ | 1 | MySQL | MySQL is ... | 2021-07-03 23:11:45 | sanghyuk | developer | | 2 | ORACLE | ORACLE is ... | 2021-07-04 00:24:59 | sanghyuk | developer | | 3 | SQL server | SQL server is ... | 2021-07-04 00:25:29 | john doe | database administrator | | 4 | PostgreSQL | postgreSQL is ... | 2021-07-04 00:26:27 | Kahn | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2021-07-04 00:26:48 | sanghyuk | developer | +----+------------+-------------------+---------------------+----------+---------------------------+ 현제 테이블의 상태는 위와 같은데, id가 3인 데이터의 author을 바꾸고자 한다면 아래와 같이 입력하면 됩니다. 예시 mysql&amp;gt; UPDATE topic SET author=&apos;Joe&apos; WHERE id=4; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 그리고 다시 테이블을 확인해 보면 잘 바뀐것을 확인할 수 있습니다. mysql&amp;gt; SELECT * FROM topic; +----+------------+-------------------+---------------------+----------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+----------+---------------------------+ | 1 | MySQL | MySQL is ... | 2021-07-03 23:11:45 | sanghyuk | developer | | 2 | ORACLE | ORACLE is ... | 2021-07-04 00:24:59 | sanghyuk | developer | | 3 | SQL server | SQL server is ... | 2021-07-04 00:25:29 | john doe | database administrator | | 4 | PostgreSQL | postgreSQL is ... | 2021-07-04 00:26:27 | Joe | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2021-07-04 00:26:48 | sanghyuk | developer | +----+------------+-------------------+---------------------+----------+---------------------------+ 5 rows in set (0.00 sec) DELETE :star: DELETE또한 마찬가지로 UPDATE처럼 WHERE절의 조건을 잘 적어줘야 합니다. 만약 적지않으면 모든 값이 지워지겠지요. 문법 DELETE FROM &amp;lt;table명&amp;gt; WHERE 필드이름=데이터값 아래의 테이블에서 id값이 5인 데이터를 테이블에서 지워보겠습니다. SELECT * FROM topic; +----+------------+-------------------+---------------------+----------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+----------+---------------------------+ | 1 | MySQL | MySQL is ... | 2021-07-03 23:11:45 | sanghyuk | developer | | 2 | ORACLE | ORACLE is ... | 2021-07-04 00:24:59 | sanghyuk | developer | | 3 | SQL server | SQL server is ... | 2021-07-04 00:25:29 | john doe | database administrator | | 4 | PostgreSQL | postgreSQL is ... | 2021-07-04 00:26:27 | Kahn | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2021-07-04 00:26:48 | sanghyuk | developer | +----+------------+-------------------+---------------------+----------+---------------------------+ mysql&amp;gt; DELETE FROM topic -&amp;gt; WHERE id=5; Query OK, 1 row affected (0.01 sec) 그리고 확인해 보면 잘 지워진것을 알 수 있습니다. mysql&amp;gt; SELECT * FROM topic; +----+------------+-------------------+---------------------+----------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+----------+---------------------------+ | 1 | MySQL | MySQL is ... | 2021-07-03 23:11:45 | sanghyuk | developer | | 2 | ORACLE | ORACLE is ... | 2021-07-04 00:24:59 | sanghyuk | developer | | 3 | SQL server | SQL server is ... | 2021-07-04 00:25:29 | john doe | database administrator | | 4 | PostgreSQL | postgreSQL is ... | 2021-07-04 00:26:27 | Joe | data scientist, developer | +----+------------+-------------------+---------------------+----------+---------------------------+ 4 rows in set (0.00 sec)</summary></entry><entry><title type="html">[ #5 ] MySQL - 관계형 DB의 필요성</title><link href="https://shjeong92.github.io/2021/07/04/Database-05.html" rel="alternate" type="text/html" title="[ #5 ] MySQL - 관계형 DB의 필요성" /><published>2021-07-04T00:00:00+09:00</published><updated>2021-07-04T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/04/Database-05</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/04/Database-05.html">&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORACLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postgreSQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joe&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanghyuk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+----------+---------------------------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 테이블을 보면 저자들에 대한 정보가 중복되는것을 확인할 수 있는데요,&lt;/p&gt;

&lt;p&gt;테이블에 데이터가 중복해서 들어가 있는경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중요한 신호&lt;/li&gt;
  &lt;li&gt;개선할 것이 있다라는 증거
입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;행이 1억개라고 생각하고 천만개 데이터가 중복된다면 여러가지 문제가 생깁니다. 그리고 그데이터가 엄청난 크기의 데이터라면 더 큰 문제가 되겠죠.&lt;/p&gt;

&lt;p&gt;또한 위 테이블 같은 경우에는 이름과 프로필이 같을경우에 그 사람이 같은사람인지 다른사람인지 판별할 방법이 없기도 하죠&lt;/p&gt;

&lt;p&gt;이를 해결하기위해 저자에 관련된 부분과 토픽을 테이블에서 아래와 같이 분리시켜 줍니다.&lt;/p&gt;

&lt;h4 id=&quot;topic-테이블&quot;&gt;topic 테이블&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;author-테이블&quot;&gt;author 테이블&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duru&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taeho&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+--------+---------------------------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중복을 없애주고, 동일명, 동일 프로필의 경우도 알아낼 수 있어 좋긴한데, 
첫번재 테이블 처럼 모든 정보를 볼 수가 없습니다.&lt;/p&gt;

&lt;p&gt;하지만 이는 데이터를 조회할때 관계형 데이터베이스의 꽃인 JOIN 쿼리를 활용하여 이전에 보이던 것처럼 바꿀 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;문법&quot;&gt;문법&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;데이터&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;데이터&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 ON 절에는 어떻게 두 테이블을 조인할 것인가에 대한 조건을 담아주는 절인데, topic 의 author_id와 author 테이블의 id를 맵핑하면 되겠죠.&lt;/p&gt;

&lt;h4 id=&quot;실습&quot;&gt;실습&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duru&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taeho&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제일 처음 다 합쳐져 있던 테이블과 얼추 비슷한데, author_id와 id부분이 거슬리네요.
원하는 컬럼만 보고싶을때는 SELECT절에 원하는 컬럼을 적어주면되겠죠?&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+--------+---------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duru&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostgreSQL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taeho&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MongoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------------+-------------------+---------------------+--------+---------------------------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;유의할 점은 선택한 컬럼이 어떤테이블에서 올건지에 대한점을 정해줘야 한다는 점입니다.
이때 조금더 간결하기 위해서 FROM절에서 ALIAS설정을 해주면 조금더 편하죠 topic AS t 라고 해줘도되고 한칸띄우고 t를 적어줘도 무방합니다.&lt;/p&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><category term="RDBMS" /><summary type="html">mysql&amp;gt; SELECT * from topic; +----+------------+-------------------+---------------------+----------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+----------+---------------------------+ | 1 | MySQL | MySQL is ... | 2021-07-03 23:11:45 | sanghyuk | developer | | 2 | ORACLE | ORACLE is ... | 2021-07-04 00:24:59 | sanghyuk | developer | | 3 | SQL server | SQL server is ... | 2021-07-04 00:25:29 | john doe | database administrator | | 4 | PostgreSQL | postgreSQL is ... | 2021-07-04 00:26:27 | Joe | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2021-07-04 09:57:25 | sanghyuk | developer | +----+------------+-------------------+---------------------+----------+---------------------------+ 위 테이블을 보면 저자들에 대한 정보가 중복되는것을 확인할 수 있는데요, 테이블에 데이터가 중복해서 들어가 있는경우 중요한 신호 개선할 것이 있다라는 증거 입니다. 행이 1억개라고 생각하고 천만개 데이터가 중복된다면 여러가지 문제가 생깁니다. 그리고 그데이터가 엄청난 크기의 데이터라면 더 큰 문제가 되겠죠. 또한 위 테이블 같은 경우에는 이름과 프로필이 같을경우에 그 사람이 같은사람인지 다른사람인지 판별할 방법이 없기도 하죠 이를 해결하기위해 저자에 관련된 부분과 토픽을 테이블에서 아래와 같이 분리시켜 줍니다. topic 테이블 mysql&amp;gt; SELECT * FROM topic; +----+------------+-------------------+---------------------+-----------+ | id | title | description | created | author_id | +----+------------+-------------------+---------------------+-----------+ | 1 | MySQL | MySQL is... | 2018-01-01 12:10:11 | 1 | | 2 | Oracle | Oracle is ... | 2018-01-03 13:01:10 | 1 | | 3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 | 2 | | 4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 | 3 | | 5 | MongoDB | MongoDB is ... | 2018-01-30 12:31:03 | 1 | +----+------------+-------------------+---------------------+-----------+ author 테이블 mysql&amp;gt; SELECT * FROM author; +----+--------+---------------------------+ | id | name | profile | +----+--------+---------------------------+ | 1 | egoing | developer | | 2 | duru | database administrator | | 3 | taeho | data scientist, developer | +----+--------+---------------------------+ 중복을 없애주고, 동일명, 동일 프로필의 경우도 알아낼 수 있어 좋긴한데, 첫번재 테이블 처럼 모든 정보를 볼 수가 없습니다. 하지만 이는 데이터를 조회할때 관계형 데이터베이스의 꽃인 JOIN 쿼리를 활용하여 이전에 보이던 것처럼 바꿀 수 있습니다. 문법 SELECT * FROM &amp;lt;table1&amp;gt; LEFT JOIN &amp;lt;table2&amp;gt; ON &amp;lt;table1데이터&amp;gt; = &amp;lt;table2데이터&amp;gt;; 여기서 ON 절에는 어떻게 두 테이블을 조인할 것인가에 대한 조건을 담아주는 절인데, topic 의 author_id와 author 테이블의 id를 맵핑하면 되겠죠. 실습 mysql&amp;gt; SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id; +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ | id | title | description | created | author_id | id | name | profile | +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ | 1 | MySQL | MySQL is... | 2018-01-01 12:10:11 | 1 | 1 | egoing | developer | | 2 | Oracle | Oracle is ... | 2018-01-03 13:01:10 | 1 | 1 | egoing | developer | | 3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 | 2 | 2 | duru | database administrator | | 4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 | 3 | 3 | taeho | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2018-01-30 12:31:03 | 1 | 1 | egoing | developer | +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ 제일 처음 다 합쳐져 있던 테이블과 얼추 비슷한데, author_id와 id부분이 거슬리네요. 원하는 컬럼만 보고싶을때는 SELECT절에 원하는 컬럼을 적어주면되겠죠? mysql&amp;gt; SELECT t.id, t.title, t.description, t.created, a.name, a.profile FROM topic t LEFT JOIN author a ON t.author_id = a.id; +----+------------+-------------------+---------------------+--------+---------------------------+ | id | title | description | created | name | profile | +----+------------+-------------------+---------------------+--------+---------------------------+ | 1 | MySQL | MySQL is... | 2018-01-01 12:10:11 | egoing | developer | | 2 | Oracle | Oracle is ... | 2018-01-03 13:01:10 | egoing | developer | | 3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 | duru | database administrator | | 4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 | taeho | data scientist, developer | | 5 | MongoDB | MongoDB is ... | 2018-01-30 12:31:03 | egoing | developer | +----+------------+-------------------+---------------------+--------+---------------------------+ 유의할 점은 선택한 컬럼이 어떤테이블에서 올건지에 대한점을 정해줘야 한다는 점입니다. 이때 조금더 간결하기 위해서 FROM절에서 ALIAS설정을 해주면 조금더 편하죠 topic AS t 라고 해줘도되고 한칸띄우고 t를 적어줘도 무방합니다.</summary></entry><entry><title type="html">[ #3 ] MySQL - SQL과 테이블의 구조</title><link href="https://shjeong92.github.io/2021/07/03/Database-03.html" rel="alternate" type="text/html" title="[ #3 ] MySQL - SQL과 테이블의 구조" /><published>2021-07-03T00:00:00+09:00</published><updated>2021-07-03T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/03/Database-03</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/03/Database-03.html">&lt;h3 id=&quot;sql이란&quot;&gt;SQL이란&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;tructured&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;uery&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;anguage&lt;/p&gt;

&lt;p&gt;의 약자이며 아래와 같은 특징을 가집니다.&lt;/p&gt;

&lt;h4 id=&quot;특징&quot;&gt;특징&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;SQL은 어떤 컴퓨터 언어보다 쉽습니다.&lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스라는 카테고리에 속하는 제품들이 공통적으로 데이터베이스서버를 제어할 때 쓰이는 표준화된 언어이기에 매우 중요합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-&amp;gt; 가성비가 뛰어난 언어&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;table의-구조&quot;&gt;Table의 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124349489-37edca80-dc2a-11eb-8d12-e06ccb15b158.png&quot; alt=&quot;table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;row&lt;/strong&gt;: 데이터 그자체&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;column&lt;/strong&gt;: 데이터의 구조&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mysql-data-타입&quot;&gt;MySQL Data 타입&lt;/h3&gt;

&lt;p&gt;MySQL에서 쓸 수 있는 데이터 타입은 아래의 표와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;center&gt;형태&lt;/center&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;center&gt;데이터형&lt;/center&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;center&gt;범위&lt;/center&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;center&gt;크기&lt;/center&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;숫자형&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TINYINT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-128 ~ 128,  0 ~ 255&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SMALLINT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-32768 ~ 32767 , 0 ~ 65535&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MEDIUMINT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-8388608 ~ 8388607, 0 ~ 16777215&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;INT, INTEGER&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-2147483648 ~ 2147483647, 0 ~ 4294967295&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BIGINT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-9223372036854775808 ~ 9223372036854775807 ,&lt;br /&gt; 0 ~ 18446744073709551615&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;FLOAT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-3.402823466E+38 ~ -1.175494351E-38 ,&lt;br /&gt; 1.175494351E-38 ~ 3.402823466E+38&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DOUBLE [PRECISION], REAL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.7976931348623157E+308 ~ -2.2250738585072014E-308 ,&lt;br /&gt; 0 ~ 2.2250738585072014E-308&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DECIMAL(M,D), NUMERIC(M,D)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;데이터 베이스 설정 및 시스템에 따라 다름&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;가변적 크기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;날짜형&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DATE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;‘1000-01-01’ ~ ‘9999-12-31’&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TIME&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;‘-838:59:59’ ~ ‘838:59:59’&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DATETIME&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;‘1000-01-01 00:00:00’ &lt;br /&gt;~ ‘9999-12-31 23:59:59’&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TIMESTAMP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;‘1970-01-01 00:00:01’ &lt;br /&gt;~ ‘2038-01-19 03:14:07’&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;YEAR&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1901 ~ 2155&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;문자(열)형&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CHAR(M)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1~ 255 개의 문자&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;M &amp;lt;= 255&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ByteBINARY(M)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 ~ 255 개의 문자&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;M Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;VARCHAR(M),&lt;br /&gt;VARBINARY(M)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 ~ 255 개의 문자&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;M Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TINYBLOB, TINYTEXT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 2^8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;입력된 길이 만큼&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BLOB, TEXT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 2^16입&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;력된 길이 만큼&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MEDIUMBLOB, MEDIUMTEXT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 2^24&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;입력된 길이 만큼&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LONGBLOB, LONGTEXT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 2^32&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;입력된 길이 만큼&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ENUM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 65525 개&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 ~ 2 Byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SET&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최대 64 개의 셋&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 ~ 8 Byte&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;무조건 큰 범위의 큰 값을 사용하게되면 편하긴 하겠지만, 그만큼 저장공간을 차지하며, 느려질 수도 있기에 적절히 알맞은 타입을 선택해야합니다.&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;여러가지-제약조건&quot;&gt;여러가지 제약조건&lt;/h3&gt;
&lt;p&gt;테이블을 작성할때에 컬럼별로 다양한 제약조건을 작성할 수 있는데 아래와 같은 제약 조건들이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NOT NULL&lt;/strong&gt; : 해당컬럼은 비어있을 수 없습니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE1 VARCHAR2(10) NOT NULL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NULL&lt;/strong&gt; : 해당 컬럼은 비어있어도 상관 없습니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE1 VARCHAR2(10) NULL
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AUTO_INCREMENT&lt;/strong&gt; : 값이 생성될때마다 값을 자동으로 1씩 증가시켜 줍니다.
    &lt;ul&gt;
      &lt;li&gt;EX) id INT(11) INCREMENT
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UNIQUE&lt;/strong&gt; : NULL은 허용하지만 중복은 불가능합니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE2 VARCHAR2(10) UNIQUE
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PRIMARY KEY&lt;/strong&gt; : NULL, 중복 둘다 불가능합니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE3 VARCHAR2(10) PRIMARY KEY&lt;/li&gt;
      &lt;li&gt;EX) PRIMARY KEY id (이미 생성된 컬럼에한해서)
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FOREIGN KEY&lt;/strong&gt; : NULL가능, 다른 테이블의 PRIMARY KEY여야 하고 해당 테이블의 컬럼에 삽입되지 않은 값은 사용 불가능합니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CHECK&lt;/strong&gt; : 특정 범위 혹은 특정 값만 들어올 수 있게 합니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE5 VARCHAR2(10) CHECK(VALUE5 BETWEEN 1 AND 10)&lt;/li&gt;
      &lt;li&gt;EX) VALUE6 VARCHAR2(10) CHECK(VALUE6 IN (‘A’, ‘B’)) 
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DEFAULT&lt;/strong&gt; : NULL 값이 들어올 시 지전된 값을 삽입합니다.
    &lt;ul&gt;
      &lt;li&gt;EX) VALUE7 VARCHAR2(10) DEFAULT ‘홍길동’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;table-생성해보기&quot;&gt;Table 생성해보기&lt;/h3&gt;

&lt;p&gt;아래와 같이 스프레드 시트에있는 테이블을
mysql에서 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124349491-3a502480-dc2a-11eb-8ad3-9b70c53ced83.png&quot; alt=&quot;dataonssheet&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CREATE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIMARY&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><summary type="html">SQL이란 Structured Query Language 의 약자이며 아래와 같은 특징을 가집니다. 특징 SQL은 어떤 컴퓨터 언어보다 쉽습니다. 관계형 데이터베이스라는 카테고리에 속하는 제품들이 공통적으로 데이터베이스서버를 제어할 때 쓰이는 표준화된 언어이기에 매우 중요합니다. -&amp;gt; 가성비가 뛰어난 언어 Table의 구조 row: 데이터 그자체 column: 데이터의 구조 MySQL Data 타입 MySQL에서 쓸 수 있는 데이터 타입은 아래의 표와 같습니다. 형태 데이터형 범위 크기 숫자형 TINYINT -128 ~ 128, 0 ~ 255 1 Byte ^^ SMALLINT -32768 ~ 32767 , 0 ~ 65535 2 Byte ^^ MEDIUMINT -8388608 ~ 8388607, 0 ~ 16777215 3 Byte ^^ INT, INTEGER -2147483648 ~ 2147483647, 0 ~ 4294967295 4 Byte ^^ BIGINT -9223372036854775808 ~ 9223372036854775807 , 0 ~ 18446744073709551615 8 Byte ^^ FLOAT -3.402823466E+38 ~ -1.175494351E-38 , 1.175494351E-38 ~ 3.402823466E+38 4 Byte ^^ DOUBLE [PRECISION], REAL 1.7976931348623157E+308 ~ -2.2250738585072014E-308 , 0 ~ 2.2250738585072014E-308 8 Byte ^^ DECIMAL(M,D), NUMERIC(M,D) 데이터 베이스 설정 및 시스템에 따라 다름 가변적 크기 날짜형 DATE ‘1000-01-01’ ~ ‘9999-12-31’ 3 Byte ^^ TIME ‘-838:59:59’ ~ ‘838:59:59’ 3 Byte ^^ DATETIME ‘1000-01-01 00:00:00’ ~ ‘9999-12-31 23:59:59’ 8 Byte ^^ TIMESTAMP ‘1970-01-01 00:00:01’ ~ ‘2038-01-19 03:14:07’ 4 Byte ^^ YEAR 1901 ~ 2155 1 Byte 문자(열)형 CHAR(M) 1~ 255 개의 문자 M &amp;lt;= 255 ^^ ByteBINARY(M) 1 ~ 255 개의 문자 M Byte ^^ VARCHAR(M),VARBINARY(M) 1 ~ 255 개의 문자 M Byte ^^ TINYBLOB, TINYTEXT 최대 2^8 입력된 길이 만큼 ^^ BLOB, TEXT 최대 2^16입 력된 길이 만큼 ^^ MEDIUMBLOB, MEDIUMTEXT 최대 2^24 입력된 길이 만큼 ^^ LONGBLOB, LONGTEXT 최대 2^32 입력된 길이 만큼 ^^ ENUM 최대 65525 개 1 ~ 2 Byte ^^ SET 최대 64 개의 셋 1 ~ 8 Byte 무조건 큰 범위의 큰 값을 사용하게되면 편하긴 하겠지만, 그만큼 저장공간을 차지하며, 느려질 수도 있기에 적절히 알맞은 타입을 선택해야합니다. 여러가지 제약조건 테이블을 작성할때에 컬럼별로 다양한 제약조건을 작성할 수 있는데 아래와 같은 제약 조건들이 있습니다. NOT NULL : 해당컬럼은 비어있을 수 없습니다. EX) VALUE1 VARCHAR2(10) NOT NULL NULL : 해당 컬럼은 비어있어도 상관 없습니다. EX) VALUE1 VARCHAR2(10) NULL AUTO_INCREMENT : 값이 생성될때마다 값을 자동으로 1씩 증가시켜 줍니다. EX) id INT(11) INCREMENT UNIQUE : NULL은 허용하지만 중복은 불가능합니다. EX) VALUE2 VARCHAR2(10) UNIQUE PRIMARY KEY : NULL, 중복 둘다 불가능합니다. EX) VALUE3 VARCHAR2(10) PRIMARY KEY EX) PRIMARY KEY id (이미 생성된 컬럼에한해서) FOREIGN KEY : NULL가능, 다른 테이블의 PRIMARY KEY여야 하고 해당 테이블의 컬럼에 삽입되지 않은 값은 사용 불가능합니다. CHECK : 특정 범위 혹은 특정 값만 들어올 수 있게 합니다. EX) VALUE5 VARCHAR2(10) CHECK(VALUE5 BETWEEN 1 AND 10) EX) VALUE6 VARCHAR2(10) CHECK(VALUE6 IN (‘A’, ‘B’)) DEFAULT : NULL 값이 들어올 시 지전된 값을 삽입합니다. EX) VALUE7 VARCHAR2(10) DEFAULT ‘홍길동’ Table 생성해보기 아래와 같이 스프레드 시트에있는 테이블을 mysql에서 만들어 보겠습니다. CREATE TABLE topic( id INT(11) NOT NULL AUTO_INCREMENT, title VARCHAR(100) NOT NULL, description TEXT NULL, created DATETIME NOT NULL, author VARCHAR(15) NULL, profile VARCHAR(200) NULL, PRIMARY KEY(id) );</summary></entry><entry><title type="html">[ #2 ] MySQL - 스키마의 사용</title><link href="https://shjeong92.github.io/2021/07/03/Database-02.html" rel="alternate" type="text/html" title="[ #2 ] MySQL - 스키마의 사용" /><published>2021-07-03T00:00:00+09:00</published><updated>2021-07-03T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/03/Database-02</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/03/Database-02.html">&lt;h3 id=&quot;1-데이터베이스스키마-생성&quot;&gt;1. 데이터베이스(스키마) 생성&lt;/h3&gt;

&lt;h4 id=&quot;문법&quot;&gt;문법&lt;/h4&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE &amp;lt;DB이름&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;예제&quot;&gt;예제&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; CREATE DATABASE opentutorials&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Query OK, 1 row affected &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.01 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-데이터베이스스키마-삭제&quot;&gt;2. 데이터베이스(스키마) 삭제&lt;/h3&gt;

&lt;h4 id=&quot;문법-1&quot;&gt;문법&lt;/h4&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DROP DATABASE &amp;lt;DB이름&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;예제-1&quot;&gt;예제&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; DROP DATABASE opentutorials&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Query OK, 0 rows affected &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.01 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-데이터베이스스키마-리스트-확인하기&quot;&gt;3. 데이터베이스(스키마) 리스트 확인하기&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW DATABASES&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;schema |
| mysql              |
| opentutorials      |
| performance&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;schema |
| sys                |
+--------------------+
5 rows &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아까 생성한 opentutorials를 확인할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;4-데이터베이스스키마-사용하기&quot;&gt;4. 데이터베이스(스키마) 사용하기&lt;/h3&gt;

&lt;h4 id=&quot;문법-2&quot;&gt;문법&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;USE &amp;lt;DB이름&amp;gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;예제-2&quot;&gt;예제&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; USE opentutorials&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Database changed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 해주면 opentutorials에 있는 tables에 대하여 명령어를 실행할 수 있습니다.&lt;/p&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><category term="Schema" /><summary type="html">1. 데이터베이스(스키마) 생성 문법 CREATE DATABASE &amp;lt;DB이름&amp;gt; 예제 mysql&amp;gt; CREATE DATABASE opentutorials; Query OK, 1 row affected (0.01 sec) 2. 데이터베이스(스키마) 삭제 문법 DROP DATABASE &amp;lt;DB이름&amp;gt; 예제 mysql&amp;gt; DROP DATABASE opentutorials; Query OK, 0 rows affected (0.01 sec) 3. 데이터베이스(스키마) 리스트 확인하기 mysql&amp;gt; SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | opentutorials | | performance_schema | | sys | +--------------------+ 5 rows in set (0.00 sec) 아까 생성한 opentutorials를 확인할 수 있습니다. 4. 데이터베이스(스키마) 사용하기 문법 USE &amp;lt;DB이름&amp;gt;; 예제 mysql&amp;gt; USE opentutorials; Database changed 이렇게 해주면 opentutorials에 있는 tables에 대하여 명령어를 실행할 수 있습니다.</summary></entry><entry><title type="html">[ #1 ] MySQL - 구조</title><link href="https://shjeong92.github.io/2021/07/03/Database-01.html" rel="alternate" type="text/html" title="[ #1 ] MySQL - 구조" /><published>2021-07-03T00:00:00+09:00</published><updated>2021-07-03T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/03/Database-01</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/03/Database-01.html">&lt;p&gt;이때까지는 데이터베이스를 장고에서 제공하는 ORM을 통해서만 사용 해왔었는데요, 알고 제대로 써야겠다고 생각하여 기초부터 공부해려고 합니다.&lt;/p&gt;

&lt;p&gt;본 포스팅은 유튜브 &lt;a href=&quot;https://www.youtube.com/channel/UCvc8kv-i5fvFTJBFAk6n1SA&quot;&gt;생활코딩&lt;/a&gt;님의 데이터베이스 강좌를 보고 정리한 내용입니다.&lt;/p&gt;

&lt;h3 id=&quot;1-mysql의-구조&quot;&gt;1. MySQL의 구조&lt;/h3&gt;
&lt;p&gt;관계형 데이터베이스는 엑셀과 같은 스프레드시트에 데이터를 저장합니다 즉 표에 정보가 저장된다는 말인데요.&lt;/p&gt;

&lt;p&gt;표(Table)가 많아진다면?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정리될 필요성이 생김(파일에서 디렉토리가 필요한 상황이 생기는것과 같음)
MySql에서는 서로 연관된 표들을 그루핑해서 연관되어있지 않은 표들과 구분짓는 폴더가있는데 이를 database라 칭합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Schema(database)는 표들을 그루핑할때 사용되는 일종의 폴더와 같습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Schema 는 서로 연관된 데이터들을 그루핑 해준다는 것을 기억해줍시다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반면에 PostgreSQL에서는 이를 Mysql에서의 database는 Schema라고 불리우며 PostgreSQL 에서 database는 schema의 상위 개념입니다. Postgres에서의 database는 Mysql 에서는 database server과 같습니다. 헷갈릴 수 있으니 유의합시다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그림으로 보면 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124347638-a594f900-dc20-11eb-863a-00c4aa3ea5e3.png&quot; alt=&quot;mysql구조&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-db-사용의-장점&quot;&gt;2. DB 사용의 장점&lt;/h3&gt;
&lt;p&gt;데이터베이스는 자체적인 안전 체계가 있기에 데이터를 안전하게 보관할 수 있습니다&lt;/p&gt;

&lt;p&gt;권한 기능이 있어, MySQL에 여러사람들을 등록할 수 있고 특정 롤을 지정해줄 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;3-mysql-서버-접속&quot;&gt;3. MySQL 서버 접속&lt;/h3&gt;
&lt;p&gt;brew를 통해서 처음 mysql을 설치하면 root에 password가 설정되어있지 않은데 이를 설정해봅시다&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;먼저 MySQL은 멈춰있어야 합니다. 아래 커맨드를 입력해 종료해 줍시다.
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew services stop mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;그다음 mysql을 안전모드로 실행합니다.
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysqld_safe &lt;span class=&quot;nt&quot;&gt;--skip-grant-tables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;터미널을 하나 더 열고 password를 초기화해줍니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -u root
UPDATE mysql.user SET authentication_string=null 
WHERE User=&apos;root&apos;;
FLUSH PRIVILEGES;
exit;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;마지막으로 새로운 비밀번호를 설정해주면 끝입니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -u root
ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH caching_sha2_password BY &apos;yourpasswd&apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;비밀번호와 함께 서버접속 하기
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
Enter password: &amp;lt;yourpassword&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="Database" /><category term="MySQL" /><summary type="html">이때까지는 데이터베이스를 장고에서 제공하는 ORM을 통해서만 사용 해왔었는데요, 알고 제대로 써야겠다고 생각하여 기초부터 공부해려고 합니다. 본 포스팅은 유튜브 생활코딩님의 데이터베이스 강좌를 보고 정리한 내용입니다. 1. MySQL의 구조 관계형 데이터베이스는 엑셀과 같은 스프레드시트에 데이터를 저장합니다 즉 표에 정보가 저장된다는 말인데요. 표(Table)가 많아진다면? 정리될 필요성이 생김(파일에서 디렉토리가 필요한 상황이 생기는것과 같음) MySql에서는 서로 연관된 표들을 그루핑해서 연관되어있지 않은 표들과 구분짓는 폴더가있는데 이를 database라 칭합니다. Schema(database)는 표들을 그루핑할때 사용되는 일종의 폴더와 같습니다. Schema 는 서로 연관된 데이터들을 그루핑 해준다는 것을 기억해줍시다. 반면에 PostgreSQL에서는 이를 Mysql에서의 database는 Schema라고 불리우며 PostgreSQL 에서 database는 schema의 상위 개념입니다. Postgres에서의 database는 Mysql 에서는 database server과 같습니다. 헷갈릴 수 있으니 유의합시다. 그림으로 보면 아래와 같습니다. 2. DB 사용의 장점 데이터베이스는 자체적인 안전 체계가 있기에 데이터를 안전하게 보관할 수 있습니다 권한 기능이 있어, MySQL에 여러사람들을 등록할 수 있고 특정 롤을 지정해줄 수 있습니다. 3. MySQL 서버 접속 brew를 통해서 처음 mysql을 설치하면 root에 password가 설정되어있지 않은데 이를 설정해봅시다 먼저 MySQL은 멈춰있어야 합니다. 아래 커맨드를 입력해 종료해 줍시다. $ brew services stop mysql 그다음 mysql을 안전모드로 실행합니다. $ sudo mysqld_safe --skip-grant-tables 터미널을 하나 더 열고 password를 초기화해줍니다. mysql -u root UPDATE mysql.user SET authentication_string=null WHERE User=&apos;root&apos;; FLUSH PRIVILEGES; exit; 마지막으로 새로운 비밀번호를 설정해주면 끝입니다. mysql -u root ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH caching_sha2_password BY &apos;yourpasswd&apos;; 비밀번호와 함께 서버접속 하기 $ mysql -u root -p Enter password: &amp;lt;yourpassword&amp;gt;</summary></entry><entry><title type="html">브라우저에 URL을 입력했을 때 일어나는 일들</title><link href="https://shjeong92.github.io/2021/07/03/When-you-typed-url.html" rel="alternate" type="text/html" title="브라우저에 URL을 입력했을 때 일어나는 일들" /><published>2021-07-03T00:00:00+09:00</published><updated>2021-07-03T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/03/When-you-typed-url</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/03/When-you-typed-url.html">&lt;p&gt;이번 포스트 에서는 브라우저에 &lt;em&gt;www.naver.com&lt;/em&gt;을 입력해보고 어떠한 일이 일어나는지 과정을 알아보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-브라우저의-url-파싱&quot;&gt;1. 브라우저의 URL 파싱&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124287483-0671f200-db8b-11eb-9498-e17442d62bb7.png&quot; alt=&quot;URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;URL을 입력받은 부라우저는 먼저 해당 URL의 구조를 해석합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 프로토콜을 사용할지&lt;/li&gt;
  &lt;li&gt;어느 도메인으로 보낼지&lt;/li&gt;
  &lt;li&gt;어떤 포트로 보낼지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해석하게 되는것입니다.&lt;/p&gt;

&lt;p&gt;명시적으로 포트를 선언하지 않아도 브라우저에서는 설정된 기본값을 이용하여 요청하게되는데요, HTTP 라면 80번 포트를, HTTPS의 경우 443번 포트를 기본 값으로 요청하는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;2-hsts-목록-조회&quot;&gt;2. HSTS 목록 조회&lt;/h3&gt;

&lt;p&gt;HSTS(HTTP Strict transport security), HTTP를 허용하지 않고 HTTPS를 사용하는 연결만 허용하는 기능입니다. 만약 HTTP로 요청이 왔다면 HTTP 응답 헤더에 “Strict Transport Security”라는 필드를 포함하여 응답하고 이를 확인한 브라우저는 해당 서버에 요청할 때 HTTPS만을 통해 통신하게 됩니다. 그리고 자신의 HSTS캐시에 해당 URL을 저장하는데 이를 HSTS 목록이라고 부릅니다.&lt;/p&gt;

&lt;p&gt;이를 통해 브라우저에서는 이 HSTS 목록 조회를 통해 해당 요청을 HTTPS로 보낼지 판단합니다. HSTS목록에 해당 URL이 존재한다면 명시적으로 HTTP를 통해 요청한다 해도 브라우저가 이를 HTTPS로 요청합니다.&lt;/p&gt;

&lt;h3 id=&quot;3-url을-ip주소로-변환&quot;&gt;3. URL을 IP주소로 변환&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;www.naver.com&lt;/strong&gt; 이라는 주소로는 컴퓨터끼리 통신할 수 없습니다. 이를 인터넷 상에서 컴퓨터가 읽을 수 있는 IP주소로 변환해야 서로 통신이 가능하게 됩니다. 우선 브라우저에서는 자신의 로컬 hosts 파일과 브라우저 캐시에 해당 URL이 존재하는지 확인합니다. 존재하지 않는다면 도메인 주소를 IP주소로 변환해주는 DNS(Domain Name System) 서버에 요청하여 해당 URL을 IP주소로 변환합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS 서버로 요청하는 과정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124294979-4b018b80-db93-11eb-9b92-8b44d6763a8b.gif&quot; alt=&quot;dns&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PC는 미리 설정되어 있는 Local DNS에게 IP 주소를 물어봅니다.&lt;/li&gt;
  &lt;li&gt;만약 Local DNS에 호스트 네임에 대한 정보가 없을 경우 각 Local DNS에 설정된 Root DNS에 질의를 시작합니다.
    &lt;ul&gt;
      &lt;li&gt;Root DNS는 전세계에 13대가 구축되어 있으며, 우리나라에는 Root DNS 가 없지만, 3대의 미러 서버가 설정되어 있다고 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Root DNS에도 호스트에 대한 정보가 없으면, 다른 DNS 서버에게 질의할 수 있도록 요청합니다.&lt;/li&gt;
  &lt;li&gt;Local DNS는 .com을 관리하는 DNS에게 호스트 네임에 대한 질의를 요청하고 요청한 결과가 없을 경우 다시 질의할 다른 DNS 서버의 주소를 알려줍니다.&lt;/li&gt;
  &lt;li&gt;Local DNS는 google.com을 관리하는 DNS에게 호스트 네임에 대한 질의를 요청하고 결과가 있을 경우 IP주소에 대한 결과를 반환합니다.&lt;/li&gt;
  &lt;li&gt;Local DNS는 &lt;strong&gt;‘www.naver.com’&lt;/strong&gt;에 대한 IP 주소를 캐싱하고, 클라이언트에게 전달합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Recursive Query&lt;/strong&gt; : Local DNS 서버가 여러 DNS 서버를 차례대로 &lt;strong&gt;Root DNS 서버&lt;/strong&gt; -&amp;gt; &lt;strong&gt;com DNS 서버&lt;/strong&gt;(Top level Domain) -&amp;gt; &lt;strong&gt;naver.com DNS 서버&lt;/strong&gt;(Secondary Level Domain) 질의해서 답을 찾아가는 과정&lt;/p&gt;

&lt;h3 id=&quot;4-arp-프로세스&quot;&gt;4. ARP 프로세스&lt;/h3&gt;

&lt;p&gt;ARP (주소 결정 프로토콜, Address Resolution Protocol) 브로드캐스트를 보내기 위해서는 네트워크 스택 라이브러리가 검색할 목적지 IP의 주소를 알아야 합니다. 또, ARP 브로드캐스트를 보내는 데 사용하는 인터페이스의 MAC 주소 역시 알아야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;항목이-arp-캐시에-있을때&quot;&gt;항목이 ARP 캐시에 있을때&lt;/h4&gt;
&lt;p&gt;가장 먼저, ARP 캐시가 목적지 IP의 ARP 항목을 가지고 있는지 점검합니다. 만약 캐시에 있다면 라이브러리 함수는 다음의 형태로 결과를 리턴합니다: 목적지 IP = MAC.&lt;/p&gt;

&lt;h4 id=&quot;항목이-arp-캐시에-없을때&quot;&gt;항목이 ARP 캐시에 없을때&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;라우트 테이블을 검색해서 목적지 IP 주소가 로컬 라우트 테이블의 서브넷에 존재하는지 봅니다. 존재한다면, 라이브러리가 그 서브넷에 속하는 인터페이스를 활용합니다. 없다면, 라이브러리는 우리 기본 게이트웨이의 서브넷에 속하는 인터페이스를 활용합니다.&lt;/li&gt;
  &lt;li&gt;선택된 네트워크 인터페이스의 MAC 주소가 검색이 됩니다.&lt;/li&gt;
  &lt;li&gt;네트워크 라이브러리는 Data Link Layer(OSI Layer 2) 에 ARP요청을 보냅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARP Request&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sender MAC: interface:mac:address:here
Sender IP: interface.ip.goes.here
Target MAC: FF:FF:FF:FF:FF:FF (Broadcast)
Target IP: target.ip.goes.here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARP Reply&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sender MAC: target:mac:address:here
Sender IP: target.ip.goes.here
Target MAC: interface:mac:address:here
Target IP: interface.ip.goes.here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 네트워크 라이브러리는 우리 DNS 서버나 DNS 프로세스를 재개할 수 있는 기본 게이트웨이 중 하나의 IP 주소를 갖고 있습니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;53번 포트는 DNS 서버에 UDP 요청을 보내기 위해 열려 있습니다 (만약 응답 크기가 너무 크다면, TCP가 대신 사용되구요).&lt;/li&gt;
  &lt;li&gt;로컬/ISP의 DNS 서버가 해당 정보를 갖고 있지 않다면, 재귀적인 탐색이 수행되고 SOA(Service-oriented architecture)가 도달해서 결과값이 되돌아올 때까지 DNS 서버 리스트를 타고 올라갑니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-대상과-tcp-통신을-통해-socket열기&quot;&gt;5. 대상과 TCP 통신을 통해 Socket열기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124304948-607cb280-db9f-11eb-93c4-008c1425cda2.png&quot; alt=&quot;3wayhswithtls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTPS 프로토콜을 사용하므로
3-way handshake를 통하여 소켓을열고&lt;/p&gt;

&lt;p&gt;TLS handshake 과정이 추가됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TCP socket 생성&lt;/li&gt;
  &lt;li&gt;TCP 연결을 통해 클라이언트는 실행 중인 TLS protocol의 버전, 사용가능한 암호 세트, 사용할 수 있는 TLS 옵션 목록 등을 평문으로 보냅니다.&lt;/li&gt;
  &lt;li&gt;서버는 통신할 때 사용 할 TLS의 버전을 선택하고, 클라이언트가 제공한 목록에서 암호 조합을 결정하고 인증서를 첨부해서 클라이언트에 보냅니다. 선택적으로 서버는 다른 TLS 확장에 대한 클라이언트 인증서 및 매개 변수에 대해 요청을 보낼 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;양측이 공통된 버전과 암호를 협상 할 수 있고, 클라이언트가 서버에서 제공한 인증서에 만족하면, 클라이언트는 RSA 또는 Diffie-hellman 키 교환을 시작합니다. 이 교환은 이어지는 세션에서 사용할 대칭키를 설정합니다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트가 전송한 키 교환 매개변수를 처리하고 MAC address을 확인하여 메시지 무결성을 검사하고 암호화 된 Finished message를 클라이언트에 전송합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트를 협상 된 대칭키를 사용해 message 암호를 해독하고 MAC address를 확인해서 모두 정상이면 터널이 설정되고 통신을 시작합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;TLS&lt;/strong&gt;에 대해서는 &lt;a href=&quot;https://shjeong92.github.io/2021/06/09/Learning-Kubernetes-11.html&quot;&gt;이곳&lt;/a&gt;에 자세히 정리해 놓았습니다.&lt;/p&gt;

&lt;h3 id=&quot;6-http-프로토콜&quot;&gt;6. HTTP 프로토콜&lt;/h3&gt;

&lt;p&gt;구글이 만든 웹 브라우저라면, 페이지를 가져오기 위해 HTTP 요청을 보내는 대신, 서버에게 HTTP에서 SPDY로 “업그레이드”할 것을 협상해봅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SPDY란&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;구글은 더 빠른 Web을 실현하기 위해 Latency 관점에서 HTTP를 고속화한 SPDY(스피디) 라 불리는 새로운 프로토콜을 구현했습니다.
SPDY는 HTTP를 대치하는 프로토콜이 아니고 HTTP를 통한 전송을 재 정의하는 형태로 구현 되어있습니다.
SPDY는 실제로 HTTP/1.1에 비해 상당한 성능 향상과 효율성을 보여줬고 이는 HTTP/2 초안의 참고 규격이 되었다고 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 클라이언트가 SPDY를 지원하지 않고 HTTP만 쓴다면, 서버에 다으과 같은 요청을  보냅니다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Host: google.com
Connection: close
[other headers]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[other headers]&lt;/strong&gt; 부분은 HTTP 사양에 따라 콜론으로 구분되고 각각 새 줄로 나뉘는 일련의 키-값 쌍을 나타냅니다. (이 부분은 사용된 브라우저가 HTTP 스펙을 벗어나는 어떠한 버그도 없을 때를 가정해요. 웹 브라우저가 HTTP/1.1 을 쓴다는 것도 마찬가지인데, 그렇지 않을 경우엔 Host 헤더가 요청에 포함되지 않고 GET 요청에 명시된 버전이 HTTP/1.0 혹은 HTTP/0.9 일 수도 있습니다. )&lt;/p&gt;

&lt;p&gt;HTTP/1.1은 송신자측에서 응답을 받은 직후에 연결이 끊어질 것이라는 신호를 보내기 위해 “close”라는 연결 옵션을 정의합니다. 아래의 예처럼 말이죠.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;영구 접속을 허용하지 않는 HTTP/1.1 어플리케이션은 반드시 “close” 연결 옵션을 모든 메시지에 포함해야 합니다.&lt;/p&gt;

&lt;p&gt;요청과 헤더를 보낸 후에, 웹 브라우저는 하나의 빈 줄을 서버에 보내 요청 내용이 모두 보내졌음을 알립니다.&lt;/p&gt;

&lt;p&gt;서버는 요청의 상태를 나타내는 코드와 다음과 같은 형태로 응답합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;200 OK
[response headers]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이다음에 www.naver.com의 HTML컨텐츠를 payload에 실어서 보냅니다.
그 이후 서버는 연결을 종료할 수도있고, 클라이언트가 보낸 헤더가 요청한 경우 추가 요청을 위해 연결을 유지 할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;만약 웹 브라우저가 보낸 HTTP header에 웹 브라우저가 캐시한 파일의 버전이 마지막 검색이후 수정되지 않았으면(HTTP header의 ETag 값으로 확인) 서버에선 다음과 같이 응답합니다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;304 Not Modified
[response headers]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;이 응답에서는 payload 가 없고 웹브라우저는 캐시에서 HTML을 검색합니다.&lt;/li&gt;
  &lt;li&gt;HTML을 파싱한 후 웹 브라우저와 서버는 GET / HTTP/1.1요청이 아닌 HTML페이지에서 참조하는 모든 자원(Image, CSS, favicon.ico 등)에 대해 이 프로세스를 반복합니다.&lt;/li&gt;
  &lt;li&gt;만약 HTML이 다른 Domain의 resource를 참조하는 경우 웹 브라우저는 다른 도메인을 확인하는 단계(&lt;strong&gt;3번 단계&lt;/strong&gt;)로 돌아가고 해당 도메인에 대해 모든 단계를 수행하고, Host 요청의 header는 해당 서버의 이름으로 설정됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-http-서버의-응답&quot;&gt;7. HTTP 서버의 응답&lt;/h3&gt;

&lt;p&gt;HTTPD (HTTP 데몬) 서버는 서버측에서 요청/응답을 처리하는 친구입니다. 대표적으로 자주 쓰이는 nginx 가 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTPD (HTTP 데몬)&lt;/li&gt;
  &lt;li&gt;서버는 요청을 다음과 같은 파라미터들로 분리합니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP method(GET, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, HEAD 중 하나).
  주소창에 URL을 직접 입력한 경우에는 GET 이겠죠&lt;/li&gt;
      &lt;li&gt;도메인, (naver.com).&lt;/li&gt;
      &lt;li&gt;요청된 경로/페이지 - (www.naver.com은 홈페이지입니다, 즉 특정 경로와 페이지가 없기에 기본경로인 ‘/’가 들어갑니다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 naver.com에 해당하는 가상 호스트가 서버에 설정되어 있는지 확인합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;서버는 naver.com이 GET 요청을 받아들일 수 있는지 봅니다.&lt;/li&gt;
  &lt;li&gt;서버는 해당 클라이언트에게 이 메소드가 허용되는지 봅니다 (IP, 인증, 기타 등등을 통하여).&lt;/li&gt;
  &lt;li&gt;만약에 서버에 rewrite 설정이 되어있다면 해당하는 경로로 다시 요청을 하게됩니다. (www로 시작하지 않는것을 www로 가게하거나 아래와 같이 http로 들어온 모든요청을 https로 rewrite 하기도 하죠)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  server {
      listen 80;
      server_name    my.domain.com;
      rewrite ^(.*) https://$host$1 permanent;
  }

  server {
      listen 443;
      server_name    my.domain.com;
      # .....
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 요청에 해당하는 콘텐츠를 가져오고, 기본경로인 “/” 이므로 이 경우 index파일을 해석합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 가져온 파일을 핸들러를 통해 분석하여 결과를 클라이언트로 보냅니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;8-브라우저-안에서-일어나는-일들&quot;&gt;8. 브라우저 안에서 일어나는 일들&lt;/h3&gt;

&lt;p&gt;서버가 브라우저에 (HTML, CSS, JS, 이미지, …)을 제공하면 브라우저는 아래 프로세서를 수행합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파싱 - HTML, CSS, JS&lt;/li&gt;
  &lt;li&gt;렌더링: DOM 트리 생성 -&amp;gt; 트리 렌더링 -&amp;gt; 렌더링 된 트리 배치 -&amp;gt; 렌더링 된 트리 색칠&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124343524-07e10000-dc07-11eb-8c50-0e692fd76465.png&quot; alt=&quot;rendering&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저의 기능은 서버에서 요청하고 브라우저 창에 표시하여 선택한 웹 리소스를 표시하는 것입니다. 리소스는 일반적으로 HTML문서이지만 PDF, 이미지 또는 다른 유형의 콘텐츠일 수도 있습니다. 자원의 위치는 URI(Uniform Resource Identifier)를 사용하여 사용자가 지정합니다.&lt;/p&gt;

&lt;p&gt;브라우저가 HTML파일을 해석하고 표시하는 방법은 HTML 및 CSS 사양에 지정되어 있습나다. 이 사양은 웹 표준 단체인 W3C(World Wide Web Consortium)에서 관리합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;브라우저의 일반적인 User Interface 요소&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;URI를 입력하기 위한 주소표시줄&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;뒤로 및 앞으로 버튼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;북마크 버튼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새로고침 및 중지 버튼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;홈페이지 이동 버튼&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;브라우저의 구성요소들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;유저 인터페이스: 유저 인터페이스는 주소창, 뒤로/앞으로 버튼, 즐겨찾기 메뉴 등등을 포함합니다. 당신이 요청한 페이지를 보는 창을 제외한 브라우저의 모든 부분이죠.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저 엔진: 브라우저 엔진은 UI와 렌더링 엔진 사이에 일어나는 일을 통제합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;렌더링 엔진: 렌더링 엔진은 요청된 내용을 보여주는 부분을 책임집니다. 예를 들어 만약 요청된 내용이 HTML이면, 렌더링 엔진은 HTML과 CSS를 분석하고, 처리된 내용을 화면에 띄워줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;네트워킹: 네트워킹은 HTTP와 같은 네트워크 요청을, 플랫폼별로 다른 구현체를 활용해 플랫폼-독립적인 인터페이스 뒤에서 처리하죠.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UI 백엔드: UI 백엔드는 콤보박스나 창 같은 기본적인 위젯을 그리는 데 쓰입니다. 이 백엔드는 플랫폼에 구애받지 않는 포괄적인 인터페이스를 노출시킵니다. 내부적으로는 운영 체제의 유저 인터페이스 메소드들을 활용하면서요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript 엔진: JavaScript 엔진은 JavaScript 코드를 분석하고 실행하는 데 활용됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 저장소: 데이터 저장소는 유지가 되는 계층입니다. 브라우저가 쿠키같은 갖가지 종류의 데이터를 저장해둬야 할 수도 있거든요. 브라우저는 또 localStorage와 sessionStorage, IndexedDB, WebSQL, 파일시스템과 같은 저장 메커니즘을 지원합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;html-파싱&quot;&gt;HTML 파싱&lt;/h3&gt;

&lt;p&gt;렌더링 엔진은 네트워킹 계층에서 요청한 문서의 내용을 받아오기 시작합니다. 문서는 보통 8KB 단위로 전송됩니다.&lt;/p&gt;

&lt;p&gt;HTML 파서의 주된 역할은 HTML 마크업을 파스 트리로 분석해내는 겁니다.&lt;/p&gt;

&lt;p&gt;이렇게 나온 트리 (“파스 트리 parse tree”) 는 DOM 요소와 속성 노드의 트리입니다. DOM은 Document Object Mode의 줄임말이고요. 이 친구는 HTML 문서와 HTML 요소를 JavaScript 같은 외부 요소와 이어주는 인터페이스의 객체 표현 방식입니다. 이 트리의 루트는 “Document” 객체입니다. 스크립트를 통한 모든 조작보다 앞서, DOM은 마크업과 거의 일대일인 관계를 갖습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파싱 알고리즘&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML은 일반적인 탑-다운이나 바텀-업 방식의 파서로는 분석할 수 없습니다.&lt;/p&gt;

&lt;p&gt;그 이유는 아래오 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;관대한 언어적 특성.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저는 흔히 알려진, 잘못된 HTML들을 지원하기 위해 전통적으로 에러를 용인해왔다는 사실.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파싱 과정은 재진입 가능하다는 것입니다. 다른 언어에서, 소스는 파싱 과정에서 변하지 않지만, HTML에서는, 동적 코드 (예를 들어 document.write() 호출을 담고 있는 스크립트 요소) 가 추가적인 토큰을 추가할 수도 있어서, 파싱 과정이 실제로 입력값을 바꿉니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반적인 파싱 기술을 쓸 수 없으니, 브라우저는 임의의 파서를 활용해 HTML을 파싱합니다. 파싱 알고리즘은 아래와 같이 &lt;strong&gt;토큰화와 트리생성&lt;/strong&gt;의 단계로 이루워 져있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/75003424/124343711-b174c100-dc08-11eb-819f-98ddc4f021c2.png&quot; alt=&quot;parser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자세한 정보는 &lt;a href=&quot;https://www.w3.org/TR/2011/WD-html5-20110405/parsing.html#parsing&quot;&gt;이곳&lt;/a&gt;에서 확인가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파싱이 끝난후의 동작&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;브라우저가 페이지에 링크돼있는 외부 자원 (CSS, 이미지, JavaScript 파일, 기타 등등) 을 가져오기 시작합니다.&lt;/p&gt;

&lt;p&gt;이 단계에서 브라우저는 해당 문서가 상호작용 중이라는 표시를 해두고 “deferred” 모드에 있는 스크립트를 파싱하기 시작합니다: 반드시 문서를 분석한 후에 실행되어야 하는 것들이죠. 문서의 상태는 “complete” 으로 설정되고 “load” 이벤트가 발생됩니다.&lt;/p&gt;

&lt;p&gt;HTML 페이지에 “Invalid Syntax”에러는 존재하지 않습니다. 브라우저가 어떠한 내용이든 고치고 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS 분석&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 내용과, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt; 속성값으로 되어있는 CSS 파일들을 &lt;a href=&quot;https://www.w3.org/TR/CSS2/grammar.html&quot;&gt;“CSS lexical and syntax grammar”&lt;/a&gt; 를 활용해 파싱합니다.
각각의 CSS 파일은 Stylesheet object 로 파싱되는데, 여기서 각 객체는 selector 및 CSS 문법에 해당하는 객체들과 함께 CSS 규칙들을 담고 있습니다.
CSS 파서는 특정한 파서 생성기가 사용됐을 경우에 탑-다운이나 바텀-업도 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;페이지 렌더링&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;DOM 노드를 탐색하고 각 노드에 대한 CSS 값을 계산하여 “Frame tree” 또는 “Render tree”를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자식 노드의 width와 수평 margin, border, padding 을 합해서 Frame tree의 아래쪽에 있는 각 노드의 기본 너비를 계산합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 노드의 사용 가능한 너비를 자식 노드에 할당하여 각 노드의 실제 width 값 계산합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;텍스트 배치를 적용하고 하위 노드의 height와 margin, border, padding을 합해 각 노드의 높이를 상향식으로 계산합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위에서 계산 된 정보를 사용해서 각 노드의 좌표를 계산합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;float, absolutely, relatively 와 같은 속성이 사용되었을 경우 더 복잡한 단계가 수행 됩니다.&lt;/p&gt;

    &lt;p&gt;자세한건  &lt;a href=&quot;http://dev.w3.org/csswg/css2/&quot;&gt;http://dev.w3.org/csswg/css2/&lt;/a&gt; 와 &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;http://www.w3.org/Style/CSS/&lt;/a&gt;current-work 참조하세요&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이지의 어느 부분을 그룹으로 애니메이션화 할 수 있는지 설명하는 레이어를 만듭니다. frame/render object는 layer에 할당합니다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;텍스처는 페이지의 각 레이어에 할당합니다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 frame/render object를 통해서 각 레이어 별로 그리기 명령을 실행합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 모든 단계를 웹페이지가 렌더링 된 마지막 시간에 계산 된 값을 재사용 할 수 있으므로 점진적 변경은 작업이 덜 필요합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이지 레이어는 합성 프로세스로 보내져 browser chrome, iframe, addon panels과 같은 시각적인 레이어와 결합됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최종 레이어 위치가 계산되고 Direct3D / OpenGL을 통해 합성 명령이 실행된다. GPU 명령 버퍼는 비동기 렌더링을 위해 GPU로 출력되고 frame은 window server로 전송됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;GPU 렌더링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;렌더링 프로세스 동안 graphical computing layers는 CPU 또는 GPU를 사용할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;graphical rendering 계산에 GPU를 사용하는 경우 그래픽 소프트웨어 레이어에서 작업을 여러조각으로 분할하여 렌더링 프로세스에 필요한 부동 소수점 계산을 위해 GPU 대용량 병렬 처리를 사용 할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;렌더링이 완료된 후 브라우저는 Javascript 실행을 통해 DOM과 CSSOM이 변경 될 수 있는데 레이아웃이 수정 되는 경우 페이지 렌더링 및 페인팅을 다시 수행합니다.&lt;/p&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="네트워크" /><category term="브라우저" /><summary type="html">이번 포스트 에서는 브라우저에 www.naver.com을 입력해보고 어떠한 일이 일어나는지 과정을 알아보겠습니다. 1. 브라우저의 URL 파싱 URL을 입력받은 부라우저는 먼저 해당 URL의 구조를 해석합니다. 어떤 프로토콜을 사용할지 어느 도메인으로 보낼지 어떤 포트로 보낼지 해석하게 되는것입니다. 명시적으로 포트를 선언하지 않아도 브라우저에서는 설정된 기본값을 이용하여 요청하게되는데요, HTTP 라면 80번 포트를, HTTPS의 경우 443번 포트를 기본 값으로 요청하는 것입니다. 2. HSTS 목록 조회 HSTS(HTTP Strict transport security), HTTP를 허용하지 않고 HTTPS를 사용하는 연결만 허용하는 기능입니다. 만약 HTTP로 요청이 왔다면 HTTP 응답 헤더에 “Strict Transport Security”라는 필드를 포함하여 응답하고 이를 확인한 브라우저는 해당 서버에 요청할 때 HTTPS만을 통해 통신하게 됩니다. 그리고 자신의 HSTS캐시에 해당 URL을 저장하는데 이를 HSTS 목록이라고 부릅니다. 이를 통해 브라우저에서는 이 HSTS 목록 조회를 통해 해당 요청을 HTTPS로 보낼지 판단합니다. HSTS목록에 해당 URL이 존재한다면 명시적으로 HTTP를 통해 요청한다 해도 브라우저가 이를 HTTPS로 요청합니다. 3. URL을 IP주소로 변환 www.naver.com 이라는 주소로는 컴퓨터끼리 통신할 수 없습니다. 이를 인터넷 상에서 컴퓨터가 읽을 수 있는 IP주소로 변환해야 서로 통신이 가능하게 됩니다. 우선 브라우저에서는 자신의 로컬 hosts 파일과 브라우저 캐시에 해당 URL이 존재하는지 확인합니다. 존재하지 않는다면 도메인 주소를 IP주소로 변환해주는 DNS(Domain Name System) 서버에 요청하여 해당 URL을 IP주소로 변환합니다. DNS 서버로 요청하는 과정 PC는 미리 설정되어 있는 Local DNS에게 IP 주소를 물어봅니다. 만약 Local DNS에 호스트 네임에 대한 정보가 없을 경우 각 Local DNS에 설정된 Root DNS에 질의를 시작합니다. Root DNS는 전세계에 13대가 구축되어 있으며, 우리나라에는 Root DNS 가 없지만, 3대의 미러 서버가 설정되어 있다고 합니다. Root DNS에도 호스트에 대한 정보가 없으면, 다른 DNS 서버에게 질의할 수 있도록 요청합니다. Local DNS는 .com을 관리하는 DNS에게 호스트 네임에 대한 질의를 요청하고 요청한 결과가 없을 경우 다시 질의할 다른 DNS 서버의 주소를 알려줍니다. Local DNS는 google.com을 관리하는 DNS에게 호스트 네임에 대한 질의를 요청하고 결과가 있을 경우 IP주소에 대한 결과를 반환합니다. Local DNS는 ‘www.naver.com’에 대한 IP 주소를 캐싱하고, 클라이언트에게 전달합니다. Recursive Query : Local DNS 서버가 여러 DNS 서버를 차례대로 Root DNS 서버 -&amp;gt; com DNS 서버(Top level Domain) -&amp;gt; naver.com DNS 서버(Secondary Level Domain) 질의해서 답을 찾아가는 과정 4. ARP 프로세스 ARP (주소 결정 프로토콜, Address Resolution Protocol) 브로드캐스트를 보내기 위해서는 네트워크 스택 라이브러리가 검색할 목적지 IP의 주소를 알아야 합니다. 또, ARP 브로드캐스트를 보내는 데 사용하는 인터페이스의 MAC 주소 역시 알아야 합니다. 항목이 ARP 캐시에 있을때 가장 먼저, ARP 캐시가 목적지 IP의 ARP 항목을 가지고 있는지 점검합니다. 만약 캐시에 있다면 라이브러리 함수는 다음의 형태로 결과를 리턴합니다: 목적지 IP = MAC. 항목이 ARP 캐시에 없을때 라우트 테이블을 검색해서 목적지 IP 주소가 로컬 라우트 테이블의 서브넷에 존재하는지 봅니다. 존재한다면, 라이브러리가 그 서브넷에 속하는 인터페이스를 활용합니다. 없다면, 라이브러리는 우리 기본 게이트웨이의 서브넷에 속하는 인터페이스를 활용합니다. 선택된 네트워크 인터페이스의 MAC 주소가 검색이 됩니다. 네트워크 라이브러리는 Data Link Layer(OSI Layer 2) 에 ARP요청을 보냅니다. ARP Request Sender MAC: interface:mac:address:here Sender IP: interface.ip.goes.here Target MAC: FF:FF:FF:FF:FF:FF (Broadcast) Target IP: target.ip.goes.here ARP Reply Sender MAC: target:mac:address:here Sender IP: target.ip.goes.here Target MAC: interface:mac:address:here Target IP: interface.ip.goes.here 이제 네트워크 라이브러리는 우리 DNS 서버나 DNS 프로세스를 재개할 수 있는 기본 게이트웨이 중 하나의 IP 주소를 갖고 있습니다 53번 포트는 DNS 서버에 UDP 요청을 보내기 위해 열려 있습니다 (만약 응답 크기가 너무 크다면, TCP가 대신 사용되구요). 로컬/ISP의 DNS 서버가 해당 정보를 갖고 있지 않다면, 재귀적인 탐색이 수행되고 SOA(Service-oriented architecture)가 도달해서 결과값이 되돌아올 때까지 DNS 서버 리스트를 타고 올라갑니다 5. 대상과 TCP 통신을 통해 Socket열기 HTTPS 프로토콜을 사용하므로 3-way handshake를 통하여 소켓을열고 TLS handshake 과정이 추가됩니다. TCP socket 생성 TCP 연결을 통해 클라이언트는 실행 중인 TLS protocol의 버전, 사용가능한 암호 세트, 사용할 수 있는 TLS 옵션 목록 등을 평문으로 보냅니다. 서버는 통신할 때 사용 할 TLS의 버전을 선택하고, 클라이언트가 제공한 목록에서 암호 조합을 결정하고 인증서를 첨부해서 클라이언트에 보냅니다. 선택적으로 서버는 다른 TLS 확장에 대한 클라이언트 인증서 및 매개 변수에 대해 요청을 보낼 수도 있습니다. 양측이 공통된 버전과 암호를 협상 할 수 있고, 클라이언트가 서버에서 제공한 인증서에 만족하면, 클라이언트는 RSA 또는 Diffie-hellman 키 교환을 시작합니다. 이 교환은 이어지는 세션에서 사용할 대칭키를 설정합니다. 서버는 클라이언트가 전송한 키 교환 매개변수를 처리하고 MAC address을 확인하여 메시지 무결성을 검사하고 암호화 된 Finished message를 클라이언트에 전송합니다. 클라이언트를 협상 된 대칭키를 사용해 message 암호를 해독하고 MAC address를 확인해서 모두 정상이면 터널이 설정되고 통신을 시작합니다. TLS에 대해서는 이곳에 자세히 정리해 놓았습니다. 6. HTTP 프로토콜 구글이 만든 웹 브라우저라면, 페이지를 가져오기 위해 HTTP 요청을 보내는 대신, 서버에게 HTTP에서 SPDY로 “업그레이드”할 것을 협상해봅니다. SPDY란 구글은 더 빠른 Web을 실현하기 위해 Latency 관점에서 HTTP를 고속화한 SPDY(스피디) 라 불리는 새로운 프로토콜을 구현했습니다. SPDY는 HTTP를 대치하는 프로토콜이 아니고 HTTP를 통한 전송을 재 정의하는 형태로 구현 되어있습니다. SPDY는 실제로 HTTP/1.1에 비해 상당한 성능 향상과 효율성을 보여줬고 이는 HTTP/2 초안의 참고 규격이 되었다고 합니다. 만약 클라이언트가 SPDY를 지원하지 않고 HTTP만 쓴다면, 서버에 다으과 같은 요청을 보냅니다 GET / HTTP/1.1 Host: google.com Connection: close [other headers] [other headers] 부분은 HTTP 사양에 따라 콜론으로 구분되고 각각 새 줄로 나뉘는 일련의 키-값 쌍을 나타냅니다. (이 부분은 사용된 브라우저가 HTTP 스펙을 벗어나는 어떠한 버그도 없을 때를 가정해요. 웹 브라우저가 HTTP/1.1 을 쓴다는 것도 마찬가지인데, 그렇지 않을 경우엔 Host 헤더가 요청에 포함되지 않고 GET 요청에 명시된 버전이 HTTP/1.0 혹은 HTTP/0.9 일 수도 있습니다. ) HTTP/1.1은 송신자측에서 응답을 받은 직후에 연결이 끊어질 것이라는 신호를 보내기 위해 “close”라는 연결 옵션을 정의합니다. 아래의 예처럼 말이죠. Connection: close 영구 접속을 허용하지 않는 HTTP/1.1 어플리케이션은 반드시 “close” 연결 옵션을 모든 메시지에 포함해야 합니다. 요청과 헤더를 보낸 후에, 웹 브라우저는 하나의 빈 줄을 서버에 보내 요청 내용이 모두 보내졌음을 알립니다. 서버는 요청의 상태를 나타내는 코드와 다음과 같은 형태로 응답합니다. 200 OK [response headers] 이다음에 www.naver.com의 HTML컨텐츠를 payload에 실어서 보냅니다. 그 이후 서버는 연결을 종료할 수도있고, 클라이언트가 보낸 헤더가 요청한 경우 추가 요청을 위해 연결을 유지 할 수도 있습니다. 만약 웹 브라우저가 보낸 HTTP header에 웹 브라우저가 캐시한 파일의 버전이 마지막 검색이후 수정되지 않았으면(HTTP header의 ETag 값으로 확인) 서버에선 다음과 같이 응답합니다 304 Not Modified [response headers] 이 응답에서는 payload 가 없고 웹브라우저는 캐시에서 HTML을 검색합니다. HTML을 파싱한 후 웹 브라우저와 서버는 GET / HTTP/1.1요청이 아닌 HTML페이지에서 참조하는 모든 자원(Image, CSS, favicon.ico 등)에 대해 이 프로세스를 반복합니다. 만약 HTML이 다른 Domain의 resource를 참조하는 경우 웹 브라우저는 다른 도메인을 확인하는 단계(3번 단계)로 돌아가고 해당 도메인에 대해 모든 단계를 수행하고, Host 요청의 header는 해당 서버의 이름으로 설정됩니다. 7. HTTP 서버의 응답 HTTPD (HTTP 데몬) 서버는 서버측에서 요청/응답을 처리하는 친구입니다. 대표적으로 자주 쓰이는 nginx 가 있습니다. HTTPD (HTTP 데몬) 서버는 요청을 다음과 같은 파라미터들로 분리합니다. HTTP method(GET, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, HEAD 중 하나). 주소창에 URL을 직접 입력한 경우에는 GET 이겠죠 도메인, (naver.com). 요청된 경로/페이지 - (www.naver.com은 홈페이지입니다, 즉 특정 경로와 페이지가 없기에 기본경로인 ‘/’가 들어갑니다) 서버는 naver.com에 해당하는 가상 호스트가 서버에 설정되어 있는지 확인합니다. 서버는 naver.com이 GET 요청을 받아들일 수 있는지 봅니다. 서버는 해당 클라이언트에게 이 메소드가 허용되는지 봅니다 (IP, 인증, 기타 등등을 통하여). 만약에 서버에 rewrite 설정이 되어있다면 해당하는 경로로 다시 요청을 하게됩니다. (www로 시작하지 않는것을 www로 가게하거나 아래와 같이 http로 들어온 모든요청을 https로 rewrite 하기도 하죠) server { listen 80; server_name my.domain.com; rewrite ^(.*) https://$host$1 permanent; } server { listen 443; server_name my.domain.com; # ..... } 서버는 요청에 해당하는 콘텐츠를 가져오고, 기본경로인 “/” 이므로 이 경우 index파일을 해석합니다. 서버는 가져온 파일을 핸들러를 통해 분석하여 결과를 클라이언트로 보냅니다. 8. 브라우저 안에서 일어나는 일들 서버가 브라우저에 (HTML, CSS, JS, 이미지, …)을 제공하면 브라우저는 아래 프로세서를 수행합니다. 파싱 - HTML, CSS, JS 렌더링: DOM 트리 생성 -&amp;gt; 트리 렌더링 -&amp;gt; 렌더링 된 트리 배치 -&amp;gt; 렌더링 된 트리 색칠 웹 브라우저의 기능은 서버에서 요청하고 브라우저 창에 표시하여 선택한 웹 리소스를 표시하는 것입니다. 리소스는 일반적으로 HTML문서이지만 PDF, 이미지 또는 다른 유형의 콘텐츠일 수도 있습니다. 자원의 위치는 URI(Uniform Resource Identifier)를 사용하여 사용자가 지정합니다. 브라우저가 HTML파일을 해석하고 표시하는 방법은 HTML 및 CSS 사양에 지정되어 있습나다. 이 사양은 웹 표준 단체인 W3C(World Wide Web Consortium)에서 관리합니다. 브라우저의 일반적인 User Interface 요소 URI를 입력하기 위한 주소표시줄 뒤로 및 앞으로 버튼 북마크 버튼 새로고침 및 중지 버튼 홈페이지 이동 버튼 브라우저의 구성요소들 유저 인터페이스: 유저 인터페이스는 주소창, 뒤로/앞으로 버튼, 즐겨찾기 메뉴 등등을 포함합니다. 당신이 요청한 페이지를 보는 창을 제외한 브라우저의 모든 부분이죠. 브라우저 엔진: 브라우저 엔진은 UI와 렌더링 엔진 사이에 일어나는 일을 통제합니다. 렌더링 엔진: 렌더링 엔진은 요청된 내용을 보여주는 부분을 책임집니다. 예를 들어 만약 요청된 내용이 HTML이면, 렌더링 엔진은 HTML과 CSS를 분석하고, 처리된 내용을 화면에 띄워줍니다. 네트워킹: 네트워킹은 HTTP와 같은 네트워크 요청을, 플랫폼별로 다른 구현체를 활용해 플랫폼-독립적인 인터페이스 뒤에서 처리하죠. UI 백엔드: UI 백엔드는 콤보박스나 창 같은 기본적인 위젯을 그리는 데 쓰입니다. 이 백엔드는 플랫폼에 구애받지 않는 포괄적인 인터페이스를 노출시킵니다. 내부적으로는 운영 체제의 유저 인터페이스 메소드들을 활용하면서요. JavaScript 엔진: JavaScript 엔진은 JavaScript 코드를 분석하고 실행하는 데 활용됩니다. 데이터 저장소: 데이터 저장소는 유지가 되는 계층입니다. 브라우저가 쿠키같은 갖가지 종류의 데이터를 저장해둬야 할 수도 있거든요. 브라우저는 또 localStorage와 sessionStorage, IndexedDB, WebSQL, 파일시스템과 같은 저장 메커니즘을 지원합니다. HTML 파싱 렌더링 엔진은 네트워킹 계층에서 요청한 문서의 내용을 받아오기 시작합니다. 문서는 보통 8KB 단위로 전송됩니다. HTML 파서의 주된 역할은 HTML 마크업을 파스 트리로 분석해내는 겁니다. 이렇게 나온 트리 (“파스 트리 parse tree”) 는 DOM 요소와 속성 노드의 트리입니다. DOM은 Document Object Mode의 줄임말이고요. 이 친구는 HTML 문서와 HTML 요소를 JavaScript 같은 외부 요소와 이어주는 인터페이스의 객체 표현 방식입니다. 이 트리의 루트는 “Document” 객체입니다. 스크립트를 통한 모든 조작보다 앞서, DOM은 마크업과 거의 일대일인 관계를 갖습니다. 파싱 알고리즘 HTML은 일반적인 탑-다운이나 바텀-업 방식의 파서로는 분석할 수 없습니다. 그 이유는 아래오 같습니다. 관대한 언어적 특성. 브라우저는 흔히 알려진, 잘못된 HTML들을 지원하기 위해 전통적으로 에러를 용인해왔다는 사실. 파싱 과정은 재진입 가능하다는 것입니다. 다른 언어에서, 소스는 파싱 과정에서 변하지 않지만, HTML에서는, 동적 코드 (예를 들어 document.write() 호출을 담고 있는 스크립트 요소) 가 추가적인 토큰을 추가할 수도 있어서, 파싱 과정이 실제로 입력값을 바꿉니다. 일반적인 파싱 기술을 쓸 수 없으니, 브라우저는 임의의 파서를 활용해 HTML을 파싱합니다. 파싱 알고리즘은 아래와 같이 토큰화와 트리생성의 단계로 이루워 져있습니다. 자세한 정보는 이곳에서 확인가능합니다. 파싱이 끝난후의 동작 브라우저가 페이지에 링크돼있는 외부 자원 (CSS, 이미지, JavaScript 파일, 기타 등등) 을 가져오기 시작합니다. 이 단계에서 브라우저는 해당 문서가 상호작용 중이라는 표시를 해두고 “deferred” 모드에 있는 스크립트를 파싱하기 시작합니다: 반드시 문서를 분석한 후에 실행되어야 하는 것들이죠. 문서의 상태는 “complete” 으로 설정되고 “load” 이벤트가 발생됩니다. HTML 페이지에 “Invalid Syntax”에러는 존재하지 않습니다. 브라우저가 어떠한 내용이든 고치고 넘어갑니다. CSS 분석 &amp;lt;style&amp;gt; 태그 내용과, style 속성값으로 되어있는 CSS 파일들을 “CSS lexical and syntax grammar” 를 활용해 파싱합니다. 각각의 CSS 파일은 Stylesheet object 로 파싱되는데, 여기서 각 객체는 selector 및 CSS 문법에 해당하는 객체들과 함께 CSS 규칙들을 담고 있습니다. CSS 파서는 특정한 파서 생성기가 사용됐을 경우에 탑-다운이나 바텀-업도 가능합니다. 페이지 렌더링 DOM 노드를 탐색하고 각 노드에 대한 CSS 값을 계산하여 “Frame tree” 또는 “Render tree”를 만듭니다. 자식 노드의 width와 수평 margin, border, padding 을 합해서 Frame tree의 아래쪽에 있는 각 노드의 기본 너비를 계산합니다. 각 노드의 사용 가능한 너비를 자식 노드에 할당하여 각 노드의 실제 width 값 계산합니다. 텍스트 배치를 적용하고 하위 노드의 height와 margin, border, padding을 합해 각 노드의 높이를 상향식으로 계산합니다. 위에서 계산 된 정보를 사용해서 각 노드의 좌표를 계산합니다. float, absolutely, relatively 와 같은 속성이 사용되었을 경우 더 복잡한 단계가 수행 됩니다. 자세한건 http://dev.w3.org/csswg/css2/ 와 http://www.w3.org/Style/CSS/current-work 참조하세요 페이지의 어느 부분을 그룹으로 애니메이션화 할 수 있는지 설명하는 레이어를 만듭니다. frame/render object는 layer에 할당합니다 텍스처는 페이지의 각 레이어에 할당합니다 각 frame/render object를 통해서 각 레이어 별로 그리기 명령을 실행합니다. 위의 모든 단계를 웹페이지가 렌더링 된 마지막 시간에 계산 된 값을 재사용 할 수 있으므로 점진적 변경은 작업이 덜 필요합니다. 페이지 레이어는 합성 프로세스로 보내져 browser chrome, iframe, addon panels과 같은 시각적인 레이어와 결합됩니다. 최종 레이어 위치가 계산되고 Direct3D / OpenGL을 통해 합성 명령이 실행된다. GPU 명령 버퍼는 비동기 렌더링을 위해 GPU로 출력되고 frame은 window server로 전송됩니다. GPU 렌더링 렌더링 프로세스 동안 graphical computing layers는 CPU 또는 GPU를 사용할 수 있습니다. graphical rendering 계산에 GPU를 사용하는 경우 그래픽 소프트웨어 레이어에서 작업을 여러조각으로 분할하여 렌더링 프로세스에 필요한 부동 소수점 계산을 위해 GPU 대용량 병렬 처리를 사용 할 수 있습니다. 렌더링이 완료된 후 브라우저는 Javascript 실행을 통해 DOM과 CSSOM이 변경 될 수 있는데 레이아웃이 수정 되는 경우 페이지 렌더링 및 페인팅을 다시 수행합니다.</summary></entry><entry><title type="html">첫 면접</title><link href="https://shjeong92.github.io/2021/07/01/Interview-01.html" rel="alternate" type="text/html" title="첫 면접" /><published>2021-07-01T00:00:00+09:00</published><updated>2021-07-01T00:00:00+09:00</updated><id>https://shjeong92.github.io/2021/07/01/Interview-01</id><content type="html" xml:base="https://shjeong92.github.io/2021/07/01/Interview-01.html">&lt;p&gt;오랜만의 포스팅 입니다.&lt;/p&gt;

&lt;p&gt;저는 이때까지 서류를 붙어본적이 없습니다.&lt;/p&gt;

&lt;p&gt;4월에는 프로그래머스 데브매칭에서 코딩테스트를 치고, 다섯 군데 지원된 서류는 모두 탈락이었습니다.&lt;/p&gt;

&lt;p&gt;서류가 많이 부족했었던 것이겠죠. 남들이 다 가지고 있는 프로젝트 경험, 클라우드 경험, 개발 관련 블로그가 없어서이었던 같았기에 이에 관련된 것을 준비하였는데, 그 과정에서 개발 블로그 작성은 정말 도움이 많이 되었던 것 같습니다.&lt;/p&gt;

&lt;p&gt;우선, 공부한 내용을 다시 복기하면서 그 내용을 더 오래 기억할 수 있었고, 설령 까먹더라도 다시 블로그에 들어오면 빠르게 리마인드가 되었기 때문입니다.&lt;/p&gt;

&lt;p&gt;저는 리액트와 장고를 이용하여 2개의 토이프로젝트 및 CKA 자격증 취득 이후에 다시 백엔드 직군으로 입사지원서를 넣었고, 처음으로 서류들이 합격하는 신기한 일이 생겼습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 오늘은 &lt;strong&gt;첫 면접&lt;/strong&gt;을 보았습니다.&lt;/p&gt;

&lt;p&gt;면접관님께서는 회사에 대해 간단히 소개해 주셨고, 저에게 간단한 자기소개를 부탁하셨습니다.&lt;/p&gt;

&lt;p&gt;어찌나 떨리던지 심장이 터지는 줄 알았습니다.&lt;/p&gt;

&lt;p&gt;그리고 전혀 간단하지 않고 장황한 자기소개를 하였습니다..&lt;/p&gt;

&lt;p&gt;여러 가지 질문들을 받았는데 순서는 뒤죽박죽이지만 나열해 보자면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;restful api 란&lt;/li&gt;
  &lt;li&gt;restful api 에서 관련된 자원을 명시하는 이유&lt;/li&gt;
  &lt;li&gt;restful 이외의 프로토콜&lt;/li&gt;
  &lt;li&gt;Covid19 관련 프로젝트 진행중 어려운점은 없었는지&lt;/li&gt;
  &lt;li&gt;쿠버네티스를 어떻게 이해하고 있는지&lt;/li&gt;
  &lt;li&gt;Loadbalancing 알고리즘에는 어떠한 것들이 있는지&lt;/li&gt;
  &lt;li&gt;특정 웹사이트를 들어가면 접속하면 일어나는 일&lt;/li&gt;
  &lt;li&gt;ssh란 무엇인지, 무엇을 할때 쓰이는지&lt;/li&gt;
  &lt;li&gt;osi 7계층에대해서 설명할 수 있는지&lt;/li&gt;
  &lt;li&gt;DNS&lt;/li&gt;
  &lt;li&gt;쉘은 무엇인지&lt;/li&gt;
  &lt;li&gt;도스와 윈도우의 차이점은 무엇인지&lt;/li&gt;
  &lt;li&gt;포트는 무엇인지&lt;/li&gt;
  &lt;li&gt;etcd 는 무엇인지&lt;/li&gt;
  &lt;li&gt;key value쌍을 이용한 다른 DB는 무엇이있는지, 어떠한 차이점이있고 언제 쓰이는지&lt;/li&gt;
  &lt;li&gt;DB index란&lt;/li&gt;
  &lt;li&gt;데이터베이스의 구조&lt;/li&gt;
  &lt;li&gt;네트워크 관련 질문&lt;/li&gt;
  &lt;li&gt;리눅스 네임스페이스&lt;/li&gt;
  &lt;li&gt;도커 네트워크관련&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이번-면접에서-느낀점&quot;&gt;이번 면접에서 느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;암기하지말고 진짜 이해를 해야합니다.&lt;/li&gt;
  &lt;li&gt;CS지식 공부 너무너무너무 중요합니다.&lt;/li&gt;
  &lt;li&gt;도커,쿠버네티스 이러한 기술을 사용하기 이전에 그에 바탕이되는 기본 개념을 알아야 합니다.&lt;/li&gt;
  &lt;li&gt;면접 복장은 무조건 정해준대로 입는게 좋습니다.&lt;/li&gt;
  &lt;li&gt;공부는 끝이 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;공부할것&quot;&gt;공부할것!&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;운영체제&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;네트워크&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터베이스&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sanghyuk Jeong</name><email>shjeong920522@gmail.com</email></author><category term="backend" /><category term="면접" /><category term="질문" /><summary type="html">오랜만의 포스팅 입니다. 저는 이때까지 서류를 붙어본적이 없습니다. 4월에는 프로그래머스 데브매칭에서 코딩테스트를 치고, 다섯 군데 지원된 서류는 모두 탈락이었습니다. 서류가 많이 부족했었던 것이겠죠. 남들이 다 가지고 있는 프로젝트 경험, 클라우드 경험, 개발 관련 블로그가 없어서이었던 같았기에 이에 관련된 것을 준비하였는데, 그 과정에서 개발 블로그 작성은 정말 도움이 많이 되었던 것 같습니다. 우선, 공부한 내용을 다시 복기하면서 그 내용을 더 오래 기억할 수 있었고, 설령 까먹더라도 다시 블로그에 들어오면 빠르게 리마인드가 되었기 때문입니다. 저는 리액트와 장고를 이용하여 2개의 토이프로젝트 및 CKA 자격증 취득 이후에 다시 백엔드 직군으로 입사지원서를 넣었고, 처음으로 서류들이 합격하는 신기한 일이 생겼습니다. 그리고 오늘은 첫 면접을 보았습니다. 면접관님께서는 회사에 대해 간단히 소개해 주셨고, 저에게 간단한 자기소개를 부탁하셨습니다. 어찌나 떨리던지 심장이 터지는 줄 알았습니다. 그리고 전혀 간단하지 않고 장황한 자기소개를 하였습니다.. 여러 가지 질문들을 받았는데 순서는 뒤죽박죽이지만 나열해 보자면, restful api 란 restful api 에서 관련된 자원을 명시하는 이유 restful 이외의 프로토콜 Covid19 관련 프로젝트 진행중 어려운점은 없었는지 쿠버네티스를 어떻게 이해하고 있는지 Loadbalancing 알고리즘에는 어떠한 것들이 있는지 특정 웹사이트를 들어가면 접속하면 일어나는 일 ssh란 무엇인지, 무엇을 할때 쓰이는지 osi 7계층에대해서 설명할 수 있는지 DNS 쉘은 무엇인지 도스와 윈도우의 차이점은 무엇인지 포트는 무엇인지 etcd 는 무엇인지 key value쌍을 이용한 다른 DB는 무엇이있는지, 어떠한 차이점이있고 언제 쓰이는지 DB index란 데이터베이스의 구조 네트워크 관련 질문 리눅스 네임스페이스 도커 네트워크관련 이번 면접에서 느낀점 암기하지말고 진짜 이해를 해야합니다. CS지식 공부 너무너무너무 중요합니다. 도커,쿠버네티스 이러한 기술을 사용하기 이전에 그에 바탕이되는 기본 개념을 알아야 합니다. 면접 복장은 무조건 정해준대로 입는게 좋습니다. 공부는 끝이 없습니다. 공부할것! 운영체제 네트워크 데이터베이스</summary></entry></feed>